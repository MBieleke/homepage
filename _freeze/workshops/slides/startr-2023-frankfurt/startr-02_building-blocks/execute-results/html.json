{
  "hash": "c3640f29f97864efc27160b35bcc6c3e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Building Blocks\"\nsubtitle: \"StartR Workshop\"\ndescription: \"R | RStudio | Console | Source | Environment | Output\"\nauthor: \"Maik Bieleke, PhD\"\ninstitute: \"University of Konstanz\"\ndate: 11/23/2024\ndate-format: long\nformat: \n  revealjs:\n    fontsize: 24pt\n    chalkboard: false\n    embed-resources: true\n    slide-number: true\n    theme: [simple, _styles/unikn.scss]\n    logo: _styles/icon.png\n    footer: \"[www.maikbieleke.com](https://www.maikbieleke.com)\"\n    margin: 0.2\n    incremental: false \n    slide-level: 2\n    highlight-style: a11y\nfrom: markdown+emoji\nrevealjs-plugins:\n  - attribution\n---\n\n\n# R {background-color=\"white\" background-image=\"figures/R-logo.png\" background-opacity=\"0.2\"}\n\n::: footer \n<https://www.r-project.org/>\n:::\n\n\n\n## What is R?\n\nR is a programming language and software environment for statistical computing and graphics. Some of its main advantages are:\n\n-   free and open source software\n-   easy sharing of data and code for reproducible research\n-   collaborative project with many contributors and resources\n-   extendible with tens of thousands of packages\n-   state-of-the-art data analysis and visualization tools\n-   cross-platform software (Windows, Mac Os, UNIX/Linux)\n\n\n\n## Creators of the R programming language\n\n::: {#fig-founders layout=\"[12,-5,12]\" layout-valign=\"bottom\"}\n![**Robert Gentleman**](figures/gentleman.png){#fig-gentleman}\n\n![**Ross Ihaka**](figures/ihaka.jpg){#fig-ihaka}\n\nR has been developed in 1992 by two statisticians at the University of Auckland, New Zealand.\n:::\n\n\n\n## {data-menu-title=\"The R Foundation\" background-color=\"white\" background-image=\"figures/vienna.jpeg\" background-opacity=0.3}\n\n![](figures/R-foundation.png)\n\n::: footer\n[https://www.r-project.org/foundation/](https://www.r-project.org/foundation/)\n:::\n\n\n\n## R as standalone program\n\n::: {layout-ncol=2}\n![Locating R.exe on a windows computer](figures/Rexe-folder.png)\n\n![Running R.exe](figures/Rexe.png)\n:::\n\n## Graphical user interface (Gui)\n\n::: {layout-ncol=2}\n![Locating RGui.exe on a windows computer](figures/RGui-folder.png)\n\n![Running RGui.exe](figures/rgui.png)\n:::\n\n\n## Integrated Development Environment (IDE)\n\n![](figures/RStudio.png)\n\n\n\n\n# RStudio {background-color=\"white\" background-image=\"figures/Rstudio-logo.png\" background-opacity=\"0.2\"}\n\n::: footer \n<https://posit.co/products/open-source/rstudio/>\n:::\n\n\n\n## {data-menu-title=\"Posit\" background-color=\"white\" background-image=\"figures/posit-background.png\" background-opacity=0.3}\n\n![](figures/posit.png)\n\n::: footer\n[https://posit.co/](https://posit.co/)\n:::\n\n\n\n## What is RStudio?\nRStudio is an integrated development environment (IDE) for R and Python.\n\n- developed and maintained by Posit PBC \n- free software with optional commercial extensions\n- tools for editing, debugging, visualization, and publishing\n- workflows for data projects and reproducible research\n- cross-platform software (Windows, Mac, Linux)\n\n\n\n## RStudio panes\n\n![](figures/RStudio-panes.jpg){width=100%}\n\n::: footer\n[https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html)\n:::\n\n\n\n# Console {background-color=\"white\" background-image=\"figures/r-console.png\" background-opacity=\"0.2\"}\n\n\n## What is the console pane?\n\n:::: {.columns}\n::: {.column width=\"50%\"}\nThe console is R within RStudio. It provides the area to interactively execute code and get an immediate response. It's typically used only for quick calculations that one doesn't want to save.\n:::\n::: {.column width=\"50%\"}\n![](figures/Rstudio-console.jpg)\n:::\n::::\n\n- The `>` signals that R is waiting for your input.\n- The `+` signals that R is waiting for you to complete your input.\n\nPress **enter** to submit your input or **escape** to cancel it.\n\n\n## R as calculator\n\n::: footer\nPhoto courtesy of [@markusspiske](https://unsplash.com/de/@markusspiske)\n:::\n\nThe console is ideally suited for quick calculations that are not saved.\n\n:::: {.columns}\n::: {.column width=\"30%\"}\n![](figures/calculator.jpg)\n:::\n::: {.column width=\"50%\"}\n\n::: {.fragment .fade-in-then-semi-out}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n1 + 1   # addition\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment .fade-in-then-semi-out}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n4 - 3   # subtraction\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment .fade-in-then-semi-out}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n2 * 5   # multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment .fade-in-then-semi-out}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n12 / 3  # division\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment .fade-in-then-semi-out}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n2^2     # exponentiation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment .fade-in-then-semi-out}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nsqrt(9) # functions (square root)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment .fade-in-then-semi-out}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\npi      # constants\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.141593\n```\n\n\n:::\n:::\n\n:::\n\n:::\n::::\n\n\n\n## Saving results in objects\n\n**Assignments** are used in R to store information in **objects**.\n\n- the operator for assignments is `<-`\n- the notation for an assignment is `object <- ...`\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-line-numbers=\"false\"}\n  a <- 5\n  ```\n  :::\n\n  \n- to see the information stored in an object, call it by name\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-line-numbers=\"false\"}\n  a\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n  [1] 5\n  ```\n  \n  \n  :::\n  :::\n\n\n::: {.callout-tip title=\"Tip\"}\nThe shortut for the assignment operator is Alt + - (Windows) or Option + - (Mac).\n:::\n\n\n\n## Naming objects\n\nR is case sensitive, so `a` and `A` would refer to different objects.\n\n- objects names can consist of letters (a-z, A-Z), numbers (0-9), and a few special characters like dots (.) and underscores (_)\n\n- if you call an object that does not exist, R will return an error\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-line-numbers=\"false\"}\n  A\n  ```\n  \n  ::: {.cell-output .cell-output-error}\n  \n  ```\n  Error in eval(expr, envir, enclos): object 'A' not found\n  ```\n  \n  \n  :::\n  :::\n\n- object names cannot start with a number or contain spaces\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-line-numbers=\"false\"}\n  1_a <- 5\n  ```\n  \n  ::: {.cell-output .cell-output-error}\n  \n  ```\n  Error: <text>:1:2: unexpected input\n  1: 1_\n       ^\n  ```\n  \n  \n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-line-numbers=\"false\"}\n  my a object <- 5\n  ```\n  \n  ::: {.cell-output .cell-output-error}\n  \n  ```\n  Error: <text>:1:4: unexpected symbol\n  1: my a\n         ^\n  ```\n  \n  \n  :::\n  :::\n\n  \n## Using objects\n\n- Objects can be used like variables.\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-line-numbers=\"false\"}\n  # object \"a\" is 5, so this is equal to 5 * 2\n  a * 2\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n  [1] 10\n  ```\n  \n  \n  :::\n  :::\n\n\n- They can be used repeatedly in the same calculation.\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-line-numbers=\"false\"}\n  # using \"a\" multiple times in a calculation\n  1 + (a - 2) * a\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n  [1] 16\n  ```\n  \n  \n  :::\n  :::\n\n\n- The object's value does not change when it's used like that.\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-line-numbers=\"false\"}\n  # still the same value\n  a\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n  [1] 5\n  ```\n  \n  \n  :::\n  :::\n\n\n\n## Changing objects\n\nTo change an object, it must be assigned again.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- using new values\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-line-numbers=\"false\"}\n  # initialize value of \"a\"\n  a <- 5\n  \n  # assign a new value to \"a\"\n  a <- 100\n  a\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n  [1] 100\n  ```\n  \n  \n  :::\n  :::\n\n:::\n\n::: {.column width=\"50%\"}\n- using the old value\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-line-numbers=\"false\"}\n  # initialize value of \"a\"\n  a <- 5\n  \n  # increase the old value by 10\n  a <- a + 10\n  a\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n  [1] 15\n  ```\n  \n  \n  :::\n  :::\n\n:::\n\n::::\n\n\n## Exercise :pencil2: {background-color=\"white\" background-image=\"figures/florence-griffith-joyner.png\" background-opacity=0.2}\n\n::: {.attribution}\nImage: Getty Images\n:::\n\nThe women's 100 m world record of **10.49 seconds** was set by US athlete Florece Griffith-Joyner in 1988.\n\n1. Store the her finishing time in an object called `record`.\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   record <- 10.49\n   ```\n   :::\n\n\n2. Compute her speed in m/s and save it as `speed_ms`.\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   speed_ms <- 100 / record\n   ```\n   :::\n\n\n3. Compute her speed in km/h and save it as `speed_kmh`. (Note that $km/h = m/s * 3.6$.)\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   speed_kmh <- speed_ms * 3.6\n   ```\n   :::\n\n\n\n\n# Source {background-color=\"white\" background-image=\"figures/script.png\" background-opacity=\"0.2\"}\n\n\n\n## What is the source pane?\n\n:::: {.columns}\n::: {.column width=\"65%\"}\nThe source pane is where you create and edit scripts for data processing and analysis. \n\n- For a new script, click **File** > **New File** > **R Script**.\n- Scripts are saved as text files with `.R` extension. \n\nThe code in a script is only evaluated after it was sent is sent to the console. \n:::\n::: {.column width=\"35%\"}\n![](figures/Rstudio-source.jpg)\n:::\n::::\n\n- copy (`Ctrl` + `C`) and paste (`Ctrl` + `V`) code into the console\n- place the cursor on a single line or select code with the mouse and click **Run**\n\n::: {.callout-tip title=\"Tip\"}\nThe shortut for **Run** is Ctrl/Cmd + Enter.\n:::\n\n\n\n## Comments (`#`)\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nA comments is text that is not evaluated as code. Comments are mainly used to **explain** what the code does. They are also helpful to **structure** scripts and for **debugging**.\n\nComments are preceded by a hash `#` and can be placed on a line of their own or at the end of a line of code.\n\n:::\n\n::: {.column width=\"50%\"}\n![](figures/comments.jpg)\n:::\n\n::::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# This is comment on a line of its own.\n10 - 5 # This is a comment at the end of a line of code.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\n## Exercise :pencil2: {background-color=\"white\" background-image=\"figures/florence-griffith-joyner.png\" background-opacity=0.2}\n\n::: {.attribution}\nImage: Getty Images\n:::\n\n1. Open a new R script in RStudio.\n\n2. Copy your solution of the last exercise (women's 100 m world record) into the script.\n\n3. Add comments to explain what each line of code does.\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   # Save the record in an object called \"record\".\n   record <- 10.49\n   \n   # Compute the speed in m/s and save it as \"speed_ms\".\n   speed_ms <- 100 / record\n   \n   # Convert the speed to km/h and save it as \"speed_kmh\".\n   speed_kmh <- speed_ms * 3.6 # Note: km/h = m/s * 3.6\n   ```\n   :::\n\n\n4. Save your script.\n\n5. Run the script and check the results in the console.\n\n\n\n\n# Environment {background-color=\"white\" background-image=\"figures/storage.jpg\" background-opacity=\"0.2\"}\n\n::: footer\nPhoto courtesy of [@ruchindra](https://unsplash.com/de/@ruchindra)\n:::\n\n## What is the environment pane?\n\n:::: {.columns}\n::: {.column width=\"55%\"}\nAll objects created by an assignment are saved in the **workspace**.\n\n- The objects in your workspace are displayed in the **environment**. \n- The commands used to create objects are displayed in the **history**. \n:::\n::: {.column width=\"45%\"}\n![](figures/Rstudio-environment.jpg)\n:::\n::::\n\n::: {.callout-tip title=\"Tip\"}\nThe environment is useful for an overview of the available objects. Moreover, you can click on some objects like data frames to view them in a spreadsheet-like viewer.\n:::\n\n\n\n## Workspace\n\n:::: {.columns}\n::: {.column width=\"50%\"}\nThe workspace (\"global environment\") is where all objects created by an assignment are saved.\n\nI recommend to deactivate automatic saving and restoring of the workspace because it can lead to unexpected results.\n\nYou can deactivate it in the **Global Options** under **General - Workspace**.\n:::\n::: {.column width=\"50%\"}\n![](figures/workspace.png)\n:::\n::::\n\n\n\n# Output {background-color=\"white\" background-image=\"figures/administration.jpg\" background-opacity=\"0.2\"}\n\n::: footer\nPhoto courtesy of [@seargreyson](https://unsplash.com/de/@seargreyson)\n:::\n\n## What is the output pane?\n\n:::: {.columns}\n::: {.column width=\"50%\"}\nThe output pane provides access to several important features.\n\n- access and organize files\n- display and zoom into plots\n- view and administer packages\n- search for help and information\n- ...\n:::\n::: {.column width=\"50%\"}\n![](figures/Rstudio-output.jpg)\n:::\n::::\n\n\n\n## Packages\n\nPackages are collections of R functions, datasets, help menus, and examples that extend the capabilities of Base R.\n\n:::: {.columns}\n::: {.column width=\"70%\"}\nInstall packages once with `install.packages()`, using quotation marks around the package name.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ninstall.packages(\"foo\")\n```\n:::\n\n:::\n::: {.column width=\"30%\"}\n![](figures/packages-lightbulbs-1.png){width=70%}\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"70%\"}\nLoad a package every time you start a new R session with `library()`. No quotation marks needed.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(foo)\n```\n:::\n\n:::\n::: {.column width=\"30%\"}\n![](figures/packages-lightbulbs-2.png){width=70%}\n:::\n::::\n\nUse the `::` operator (e.g., `dplyr::filter()`) to be specific about which package a function comes from.\n\n\n\n## {data-menu-title=\"Popular packages\"}\n\n![](figures/package-network.png){fig-align=\"center\"}\n\n::: footer\n[Mora-Cantallops et al. (2020)](https://doi.org/10.1016/j.jss.2020.110744)\n:::\n\n\n\n## Functions\n\nObjects are one fundamental thing in R. The other fundamental thing are **functions**. The basic syntax of a function is \n\n`function_name(option1, option2, ...)`.\n\nFunctions are used to perform specific tasks. For example, the function `mean()` computes the mean of a vector of numbers. The result can be assigned to a new object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply the sqrt() function to the number 9 and assign the result to x.\nx <- sqrt(9)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nMany functions are available in Base R. Additional functions are provided by packages and can be used after loading the package.\n\n\n\n## Help\n\n:::: {.columns}\n::: {.column width=\"50%\"}\nThe help menu provides access to the documentation of functions and packages. With the `?` operator, you can search for help on a specific function.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Get help for the function sqrt().\n?sqrt\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n![](figures/help.png)\n:::\n::::\n\n\n\n\n\n## Exercise :pencil2: {auto-animate=\"true\" background-color=\"white\" background-image=\"figures/packages.jpg\" background-opacity=\"0.2\"}\n\n::: {.attribution}\nPhoto courtesy of [@chuttersnap](https://unsplash.com/@chuttersnap)\n:::\n\n1.  Install the package `ggplot2` and load it into your current R session.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    install.packages(\"ggplot2\")\n    library(ggplot2)\n    ```\n    :::\n\n::: {.cell}\n\n:::\n\n\n2.  Get help about the `ggsave()` function. What does it do?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    ?ggsave\n    ```\n    :::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}