{
  "hash": "83051cb46f7e84508c518e7cf7f0f89a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploration and Visualization\"\nsubtitle: \"Methodenfortbildung der ASP\"\ndescription: \"Exploration Functions | ggplot2 Visualization\"\nauthor: \"**Maik Bieleke, PhD**\"\ninstitute: \"University of Konstanz\"\ndate: 11/16/2024\ndate-format: long\nformat: \n  revealjs:\n    transition: slide\n    fontsize: 20pt\n    chalkboard: true\n    slide-number: true\n    theme: [simple, _styles/unikn.scss]\n    footer: \"[https://maikbieleke.com/workshops/startr-2024-asp/](https://maikbieleke.com/workshops/startr-2024-asp/)\"\n    margin: 0.25\n    highlight-style: a11y\nfrom: markdown+emoji\nrevealjs-plugins:\n  - attribution\n---\n\n::: {.cell}\n\n:::\n\n\n# Data Exploration\n\n## The data viewer\n\n:::: {.columns}\n::: {.column width=\"50%\"}\nRStudio has a built-in data viewer. You can open it by clicking on the dataset in the Environment pane or by applying the `View()` function to the dataset. It allows you to\n\n- sort columns\n- filter rows\n- search for text\n\n:::\n::: {.column width=\"50%\"}\n![](figures/07-exploration/viewer.png)\n:::\n::::\n\n::: footer\n[https://support.posit.co/hc/en-us/articles/205175388-Using-the-Data-Viewer-in-the-RStudio-IDE](https://support.posit.co/hc/en-us/articles/205175388-Using-the-Data-Viewer-in-the-RStudio-IDE)\n:::\n\n\n## Overview with `str()`\n\nA good overview of the structure of the dataset can be obtained with base R function `str()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(pes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t289 obs. of  28 variables:\n $ id                  : chr  \"dkind\" \"325144\" \"323575\" \"324922\" ...\n $ gender              : chr  \"Female\" \"Male\" \"Female\" \"Female\" ...\n $ age                 : int  21 21 18 19 18 47 18 21 19 19 ...\n $ effort_1            : int  5 4 4 4 4 4 4 2 4 2 ...\n $ effort_2            : int  2 2 2 2 3 2 2 1 3 4 ...\n $ effort_3            : int  4 4 3 4 3 4 4 1 3 3 ...\n $ effort_4            : int  1 2 4 1 3 2 2 5 3 3 ...\n $ effort_5            : int  1 2 3 2 3 2 2 5 2 2 ...\n $ effort_6            : int  5 4 4 2 4 4 4 2 4 4 ...\n $ effort_7            : int  1 2 2 2 3 2 2 5 2 3 ...\n $ effort_8            : int  5 4 4 3 4 4 4 2 4 4 ...\n $ ipaq_sitt           : int  1680 1260 1260 300 1320 360 240 4200 2100 600 ...\n $ ipaq_walk           : int  210 90 180 30 1200 120 30 420 360 240 ...\n $ ipaq_mopa           : int  60 120 150 45 0 180 300 0 0 0 ...\n $ ipaq_vipa           : int  360 60 180 30 0 180 60 0 120 480 ...\n $ ipaq_mvpa           : int  420 180 330 75 0 360 360 0 120 480 ...\n $ intention           : num  7 3 5 5 5 7 6 2.5 4 6 ...\n $ self_efficacy       : num  5 5 4 4.33 4 ...\n $ automaticity        : num  4.5 4.75 3 4 3.25 4.5 2 2 3.5 4.5 ...\n $ attitudes_instru    : num  7 7 6.33 6 5.33 ...\n $ attitudes_affect    : num  6.33 6.33 5 6.33 4.33 ...\n $ motivation_auto     : num  5 4 3.33 4 3.83 ...\n $ motivation_cont     : num  2.5 2.25 1.5 2.75 2.75 3 2.5 4.5 3.25 2.5 ...\n $ need_cognition      : num  3.17 4.83 4.17 3.5 4.17 ...\n $ approach_effort     : num  4.75 4 3.75 3.25 3.75 4 4 1.75 3.75 3.25 ...\n $ avoid_effort        : num  1.25 2 2.75 1.75 3 2 2 4 2.5 3 ...\n $ approach_temperament: num  6.2 5.8 5 4.4 4.8 6.2 5.8 6.2 5.6 6.2 ...\n $ avoid_temperament   : num  5.86 5.57 5 4.14 2.86 ...\n```\n\n\n:::\n:::\n\n\n\n## Overview with `glimpse()`\n\nAn alternative is the `dplyr::glimpse()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::glimpse(pes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 289\nColumns: 28\n$ id                   <chr> \"dkind\", \"325144\", \"323575\", \"324922\", \"321253\", …\n$ gender               <chr> \"Female\", \"Male\", \"Female\", \"Female\", \"Male\", \"Fe…\n$ age                  <int> 21, 21, 18, 19, 18, 47, 18, 21, 19, 19, 18, 20, 2…\n$ effort_1             <int> 5, 4, 4, 4, 4, 4, 4, 2, 4, 2, 5, 2, 5, 4, 5, 3, 4…\n$ effort_2             <int> 2, 2, 2, 2, 3, 2, 2, 1, 3, 4, 1, 3, 1, 2, 2, 2, 2…\n$ effort_3             <int> 4, 4, 3, 4, 3, 4, 4, 1, 3, 3, 5, 2, 5, 4, 4, 4, 3…\n$ effort_4             <int> 1, 2, 4, 1, 3, 2, 2, 5, 3, 3, 1, 4, 1, 2, 2, 2, 2…\n$ effort_5             <int> 1, 2, 3, 2, 3, 2, 2, 5, 2, 2, 1, 4, 1, 1, 2, 2, 1…\n$ effort_6             <int> 5, 4, 4, 2, 4, 4, 4, 2, 4, 4, 5, 2, 5, 5, 4, 4, 4…\n$ effort_7             <int> 1, 2, 2, 2, 3, 2, 2, 5, 2, 3, 1, 4, 1, 1, 2, 2, 2…\n$ effort_8             <int> 5, 4, 4, 3, 4, 4, 4, 2, 4, 4, 5, 3, 5, 4, 4, 4, 4…\n$ ipaq_sitt            <int> 1680, 1260, 1260, 300, 1320, 360, 240, 4200, 2100…\n$ ipaq_walk            <int> 210, 90, 180, 30, 1200, 120, 30, 420, 360, 240, 1…\n$ ipaq_mopa            <int> 60, 120, 150, 45, 0, 180, 300, 0, 0, 0, 60, 0, 33…\n$ ipaq_vipa            <int> 360, 60, 180, 30, 0, 180, 60, 0, 120, 480, 240, 0…\n$ ipaq_mvpa            <int> 420, 180, 330, 75, 0, 360, 360, 0, 120, 480, 300,…\n$ intention            <dbl> 7.0, 3.0, 5.0, 5.0, 5.0, 7.0, 6.0, 2.5, 4.0, 6.0,…\n$ self_efficacy        <dbl> 5.000000, 5.000000, 4.000000, 4.333333, 4.000000,…\n$ automaticity         <dbl> 4.50, 4.75, 3.00, 4.00, 3.25, 4.50, 2.00, 2.00, 3…\n$ attitudes_instru     <dbl> 7.000000, 7.000000, 6.333333, 6.000000, 5.333333,…\n$ attitudes_affect     <dbl> 6.333333, 6.333333, 5.000000, 6.333333, 4.333333,…\n$ motivation_auto      <dbl> 5.000000, 4.000000, 3.333333, 4.000000, 3.833333,…\n$ motivation_cont      <dbl> 2.50, 2.25, 1.50, 2.75, 2.75, 3.00, 2.50, 4.50, 3…\n$ need_cognition       <dbl> 3.166667, 4.833333, 4.166667, 3.500000, 4.166667,…\n$ approach_effort      <dbl> 4.75, 4.00, 3.75, 3.25, 3.75, 4.00, 4.00, 1.75, 3…\n$ avoid_effort         <dbl> 1.25, 2.00, 2.75, 1.75, 3.00, 2.00, 2.00, 4.00, 2…\n$ approach_temperament <dbl> 6.20, 5.80, 5.00, 4.40, 4.80, 6.20, 5.80, 6.20, 5…\n$ avoid_temperament    <dbl> 5.857143, 5.571429, 5.000000, 4.142857, 2.857143,…\n```\n\n\n:::\n:::\n\n\n\n\n## Dataset properties\n\n::: {.incremental}\n\n- number of rows\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  nrow(pes)\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n  [1] 289\n  ```\n  \n  \n  :::\n  :::\n\n\n- number of columns\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ncol(pes)\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n  [1] 28\n  ```\n  \n  \n  :::\n  :::\n\n\n- dimensions (rows x columns)\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  dim(pes)\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n  [1] 289  28\n  ```\n  \n  \n  :::\n  :::\n\n\n- names of the variables\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  names(pes)\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n   [1] \"id\"                   \"gender\"               \"age\"                 \n   [4] \"effort_1\"             \"effort_2\"             \"effort_3\"            \n   [7] \"effort_4\"             \"effort_5\"             \"effort_6\"            \n  [10] \"effort_7\"             \"effort_8\"             \"ipaq_sitt\"           \n  [13] \"ipaq_walk\"            \"ipaq_mopa\"            \"ipaq_vipa\"           \n  [16] \"ipaq_mvpa\"            \"intention\"            \"self_efficacy\"       \n  [19] \"automaticity\"         \"attitudes_instru\"     \"attitudes_affect\"    \n  [22] \"motivation_auto\"      \"motivation_cont\"      \"need_cognition\"      \n  [25] \"approach_effort\"      \"avoid_effort\"         \"approach_temperament\"\n  [28] \"avoid_temperament\"   \n  ```\n  \n  \n  :::\n  :::\n\n\n:::\n  \n\n## First and last rows with `head()` and `tail()`\n\n::: {.incremental}\n\n- show the first 3 rows\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  head(pes, 3) \n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n        id gender age effort_1 effort_2 effort_3 effort_4 effort_5 effort_6\n  1  dkind Female  21        5        2        4        1        1        5\n  2 325144   Male  21        4        2        4        2        2        4\n  3 323575 Female  18        4        2        3        4        3        4\n    effort_7 effort_8 ipaq_sitt ipaq_walk ipaq_mopa ipaq_vipa ipaq_mvpa intention\n  1        1        5      1680       210        60       360       420         7\n  2        2        4      1260        90       120        60       180         3\n  3        2        4      1260       180       150       180       330         5\n    self_efficacy automaticity attitudes_instru attitudes_affect motivation_auto\n  1             5         4.50         7.000000         6.333333        5.000000\n  2             5         4.75         7.000000         6.333333        4.000000\n  3             4         3.00         6.333333         5.000000        3.333333\n    motivation_cont need_cognition approach_effort avoid_effort\n  1            2.50       3.166667            4.75         1.25\n  2            2.25       4.833333            4.00         2.00\n  3            1.50       4.166667            3.75         2.75\n    approach_temperament avoid_temperament\n  1                  6.2          5.857143\n  2                  5.8          5.571429\n  3                  5.0          5.000000\n  ```\n  \n  \n  :::\n  :::\n\n  \n- `tail(pes, 3)` would show the last 3 rows\n\n:::\n\n\n## Overview of the dataset with `skimr()` {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskimr::skim(pes)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n── Data Summary ────────────────────────\n                           Values\nName                       pes   \nNumber of rows             297   \nNumber of columns          28    \n_______________________          \nColumn type frequency:           \n  character                2     \n  numeric                  26    \n________________________         \nGroup variables            None  \n\n── Variable type: character ──────────────────────────────────────────────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 id                    0             1   1   6     0      296          0\n2 gender                0             1   0   6     8        3          0\n\n── Variable type: numeric ────────────────────────────────────────────────────────────────────────────────────────────────\n   skim_variable        n_missing complete_rate    mean       sd    p0    p25    p50     p75 p100 hist \n 1 age                          3         0.990   20.3     3.49  17     19     20      21      54 ▇▁▁▁▁\n 2 effort_1                     0         1        3.55    1.03   1      3      4       4       5 ▁▂▅▇▃\n 3 effort_2                     0         1        2.61    1.13   1      2      2       3       5 ▃▇▅▅▁\n 4 effort_3                     0         1        3.35    1.04   1      3      3       4       5 ▁▅▇▇▃\n 5 effort_4                     0         1        2.46    1.13   1      2      2       3       5 ▅▇▃▃▁\n 6 effort_5                     0         1        2.51    1.12   1      2      2       3       5 ▃▇▃▃▁\n 7 effort_6                     0         1        3.64    0.962  1      3      4       4       5 ▁▂▅▇▃\n 8 effort_7                     0         1        2.36    1.06   1      2      2       3       5 ▃▇▃▃▁\n 9 effort_8                     0         1        3.80    0.948  1      3      4       4       5 ▁▂▃▇▃\n10 ipaq_sitt                    0         1     1257.   1388.     0    360    840    1680    8655 ▇▂▁▁▁\n11 ipaq_walk                    0         1      385.    705.     0     90    210     390    9000 ▇▁▁▁▁\n12 ipaq_mopa                    0         1      175.    241.     0     30    120     240    1930 ▇▁▁▁▁\n13 ipaq_vipa                    0         1      208.    303.     0      0    105     300    2400 ▇▁▁▁▁\n14 ipaq_mvpa                    0         1      383     492.     0     90    240     480    3600 ▇▁▁▁▁\n15 intention                    0         1        5.06    1.49   1      4      5.5     6       7 ▂▂▃▅▇\n16 self_efficacy                1         0.997    4.24    0.758  1.67   4      4.33    5       5 ▁▂▁▇▇\n17 automaticity                 2         0.993    4.09    1.52   1      3      4       5.12    7 ▃▆▇▆▃\n18 attitudes_instru             1         0.997    5.95    1.19   1      5      6.33    7       7 ▁▁▁▃▇\n19 attitudes_affect             1         0.997    5.00    1.30   1      4      5       6       7 ▁▂▅▇▆\n20 motivation_auto              0         1        3.68    0.958  1      3      3.67    4.5     5 ▁▂▆▇▇\n21 motivation_cont              0         1        2.62    0.961  1      2      2.5     3.25    5 ▆▇▇▃▂\n22 need_cognition               0         1        3.38    0.721  1.33   3      3.33    3.83    5 ▁▃▇▆▂\n23 approach_effort              0         1        3.59    0.879  1      3      3.75    4       5 ▁▂▅▇▅\n24 avoid_effort                 0         1        2.48    0.988  1      1.75   2.25    3.25    5 ▆▇▅▃▁\n25 approach_temperament         0         1        4.89    0.949  1.2    4.4    5       5.6     7 ▁▁▅▇▂\n26 avoid_temperament            0         1        4.28    1.08   1.29   3.57   4.29    5       7 ▁▃▇▅▁\n```\n:::\n\n\n\n\n## Plotting in R\n\nThere are many ways to create plots in R.\n\n- Base R graphics  \n- `lattice` graphics\n- `ggplot2` graphics\n- ...\n\nBy far the most powerful and most popular package for creating plots in R is `ggplot2`.\n\n\n\n\n\n\n\n\n# The `ggplot2` Package {background-image=\"figures/07-exploration/ggplot2-hex.png\" background-opacity=\"0.1\"}\n\n## Grammar of Graphics\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![Leland Wilkinson](figures/07-exploration/wilkinson.jpg){fig-align=\"left\"}\n:::\n::: {.column width=\"30%\"}\n![](figures/07-exploration/grammar-of-graphics.jpg)\n:::\n::::\n\n## `ggplot2`\n\n:::: {.columns}\n::: {.column width=\"30%\"}\n![](figures/07-exploration/ggplot2-book.jpg)\n:::\n::: {.column width=\"70%\"}\n![Hadley Wickham](figures/07-exploration/wickham.jpg){fig-align=\"left\"}\n:::\n::::\n\n\n\n## Installing and loading ggplot2\n\nWe need to install the `ggplot2` package once.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ninstall.packages(\"ggplot2\") # if not already installed\n```\n:::\n\n\nNow we can load the package into our current R session.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(ggplot2)\n```\n:::\n\n\n\n\n## The `ggplot()` function\n\nEvery plot is initialized with the `ggplot()` function. It has two main arguments:\n\n-   `data` specifies the data frame to be used\n-   `mapping` specifies how variables are mapped to visual properties (aesthetics) of geoms\n\n::: callout-important\n## Aesthetics are the visual properties of geoms (e.g., position, color, size).\n:::\n\n\n\n\n\n\n\n\n\n\n\n# Basic plotting\n\n## Data\n\nWe first specify the data frame to be used for plotting. This provides variables (columns) and observations (rows).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(data = pes)\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-13-1.png){width=864}\n:::\n:::\n\n\n\n\n## Global aesthetics\n\nWe map variables of the data frame to global visual properties (aesthetics) of the plot. Here, `Overall` and `Wage` are mapped to x and y positions.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(data = pes, mapping = aes(x = approach_effort, y = avoid_effort))\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-14-1.png){width=864}\n:::\n:::\n\n\n\n\n## Geometric objects\n\nWe add geometric objects (geoms) with `+` and `geom_*()`. Here, we draw points at all x and y positions.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = approach_effort, y = avoid_effort)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-15-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n# More geoms and aesthetics\n\n## Adding geoms\n\nGeometric layers can be stacked to create more complex plots. Just add more `+ geom_*()` calls.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pes, aes(x = approach_effort, y = avoid_effort)) +\n  geom_point() + geom_smooth()\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-16-1.png){width=864}\n:::\n:::\n\n\n\n\n## Adding global aesthetics\n\nAdditional global aesthetics can be added to the `ggplot()` function. They will be applied to all geoms.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pes, aes(x = approach_effort, y = avoid_effort, color = gender)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-17-1.png){width=864}\n:::\n:::\n\n\n\n\n## Adding local aesthetics\n\nAesthetics can also be added locally to affect only a single geom.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pes, aes(x = approach_effort, y = avoid_effort)) +\n  geom_point() +\n  geom_smooth(aes(color = gender))\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-18-1.png){width=864}\n:::\n:::\n\n\n\n## {{< iconify solar programming-bold >}} Exercise\n\nOpen your `pes` project (see workflow) and import the data from the file `pes.csv`.\n\n::: {.incremental}\n1. Create a scatterplot showing the relationship between `intention` (x-axis) and `approach_effort` (y-axis) using `ggplot()`, `aes()` and `geom_point()`.\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   ggplot(pes, aes(x = intention, y = approach_effort)) + geom_point()\n   ```\n   :::\n\n\n2. The `alpha` aesthetic can be used to make the points transparent. Add `alpha = 0.1` to the `geom_point()` function. Why is this useful?\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   ggplot(pes, aes(x = intention, y = approach_effort)) + \n     geom_point(alpha = 0.1)\n   ```\n   :::\n\n\n3. Now fit a regression line to the plot using `geom_smooth(method = \"lm\")`.\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   ggplot(pes, aes(x = intention, y = approach_effort)) + \n     geom_point(alpha = 0.1) + geom_smooth(method = \"lm\")\n   ```\n   :::\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Common types of plots\n\n## Histograms and density plots\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = approach_effort)) + \n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-22-1.png){width=864}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = approach_effort)) + \n  geom_density()\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-23-1.png){width=864}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = approach_effort)) + \n  geom_histogram(color = \"white\")\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-24-1.png){width=864}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = approach_effort)) + \n  geom_density(aes(color = gender))\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-25-1.png){width=864}\n:::\n:::\n\n:::\n::::\n\n\n\n## Boxplots and violin plots\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = approach_effort)) + \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-26-1.png){width=864}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = gender, y = approach_effort)) + \n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-27-1.png){width=864}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = approach_effort)) + \n  geom_boxplot(aes(fill = gender))\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-28-1.png){width=864}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = gender, y = approach_effort)) + \n  geom_violin() + geom_boxplot(width = 0.1) \n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-29-1.png){width=864}\n:::\n:::\n\n:::\n::::\n\n\n\n## Barplots\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = gender)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-30-1.png){width=864}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = approach_effort, \n                fill = gender)) + \n  geom_bar(position = \"stack\")\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-31-1.png){width=864}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = gender)) + \n  geom_bar(aes(fill = gender))\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-32-1.png){width=864}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(pes, aes(x = approach_effort, \n                 fill = gender)) + \n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-33-1.png){width=864}\n:::\n:::\n\n:::\n::::\n\n\n\n\n\n\n\n\n# Fine-tuning plots\n\n## Facets\n\nFacets can be used to create multiple plots based on a categorical variable.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Create a plot for each foot\nggplot(pes, aes(x = approach_effort, y = avoid_effort)) + \n  geom_point() + geom_smooth() +\n  facet_wrap(~ gender)\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-34-1.png){width=864}\n:::\n:::\n\n\n## Scales\n\nScales control the mapping from data to aesthetics. They can be manually changed with `scale_*` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Change the color used for the points\nggplot(pes, aes(x = approach_effort, y = avoid_effort, color = gender)) + \n  geom_point() + \n  scale_color_manual(values = c(\"blue\", \"red\")) +\n  labs(x = \"Approach of Effort\", y = \"Avoidance of Effort\", \n       title = \"Relationship between Approach and Avoidance of Effort\",\n       color = \"Gender\")\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-35-1.png){width=864}\n:::\n:::\n\n\n## Theme elements\n\nTheme elements control the non-data components of the plot. They can be changed with `theme()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Change the position of the legend from the right to the bottom\nggplot(pes, aes(x = approach_effort, y = avoid_effort, color = gender)) + \n  geom_point() + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-36-1.png){width=864}\n:::\n:::\n\n\n## Themes\n\nThemes change the overall appearance of the plot. They can be changed with `theme_*` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Use the black and white (bw) theme\nggplot(pes, aes(x = approach_effort, y = avoid_effort, color = gender)) + \n  geom_point() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](startr-07_exploration_files/figure-revealjs/unnamed-chunk-37-1.png){width=864}\n:::\n:::\n\n\n\n\n# Saving plots\n\n## The `ggsave()` function\n\nThe `ggsave()` function saves plots to a file. By default, the last plot is saved into your current working directory.\n\n-   The `filename` argument specifies the file name. The file type is automatically determined by the file extension (e.g., PNG, JPG).\n-   The optional `path` argument specifies the path to the file.\n-   The optional `width` and `height` arguments specify the width and height of the plot.\n\n## Example\n\nThe following code saves a plot as a PNG file into the \"figures\" folder of the current working directory. The plot is named \"myplot\" and has a width of 9 inches and a height of 4 inches.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"figures/07-exploration/myplot.png\", \n       width = 9, height = 4)\n```\n:::\n\n\nThere are several additional options, e.g.\n\n-   `plot` to specify the plot to be saved\n-   `dpi` to specify the resolution of the plot\n-   `units` to specify the units of the width and height arguments\n\n\n\n\n## {{< iconify solar programming-bold >}} Exercise\n\n::: {.incremental}\n\nThere are many packages available for R that extend the functionality of `ggplot2`. One of these packages is `ggrain`, which provides a `geom_rain()` function for raincloud plots.\n\n1. Install and load the `ggrain` package.\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   # install.packages(\"ggrain\")\n   library(ggrain)\n   ```\n   :::\n\n\n2. Create a raincloud plot showing the distribution of `approach_effort` for each `gender`.\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   p <- ggplot(pes, aes(x = gender, y = approach_effort, fill =  gender)) +\n        geom_rain()\n   ```\n   :::\n\n\n3. Change the theme to `theme_minimal()`.\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   p <- p + theme_minimal()\n   ```\n   :::\n\n   \n4. Label the axes with `labs()`.\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   p <- p + labs(x = \"Gender\", y = \"Approach of Effort\")\n   ```\n   :::\n\n   \n5. Save the plot as \"raincloud.pdf\" in the \"figures\" folder of your project.\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n   ggsave(filename = \"figures/raincloud.pdf\", plot = p)\n   ```\n   :::\n\n:::",
    "supporting": [
      "startr-07_exploration_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}