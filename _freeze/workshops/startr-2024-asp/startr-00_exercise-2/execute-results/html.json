{
  "hash": "36c5d638940f8e34fc0303799f80850e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ãœbung: 'Angewandte Datenverarbeitung und -analyse mit R'\"\nsubtitle: \"Methodenfortbildung der ASP\"\ndescription: \"Exercises for Day 3&4 of the workshop\"\nauthor: \"Maik Bieleke, PhD\"\ninstitute: \"University of Konstanz\"\ndate: 11/17/2024\ndate-format: long\n# format: \n#   pdf:\n#     toc: true\n#     execute:\n#       include: false\nformat: \n  html:\n    toc: true\n---\n\n\n# Introduction\n\nIn this exercise, you will practice data processing and data analysis with R. The exercises are based on published data from this paper:\n\nWiewelhove, T., Raeder, C., Meyer, T., Kellmann, M., Pfeiffer, M., & Ferrauti, A. (2015). Markers for routine assessment of fatigue and recovery in male and female team sport athletes during high-intensity interval training. *PloS One*, *10*(10), e0139801. <https://doi.org/10.1371/journal.pone.0139801>\n\n# Project Setup\n\n@.  Create a new project in RStudio with folders for data and figures.\n    \n@.  Download the data from [this figshare repository](https://figshare.com/articles/dataset/_Markers_for_Routine_Assessment_of_Fatigue_and_Recovery_in_Male_and_Female_Team_Sport_Athletes_during_High_Intensity_Interval_Training_/1567810?file=2349341) and save the `.xlsx` file in the data folder of your project.\n\n@.  Import the Excel file as data frame into R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    # load the rio package\n    library(rio)\n    \n    # relative path assumes that data folder is in project directory\n    data <- import(\"data/pone.0139801.s001.xlsx\")\n    ```\n    :::\n\n    \n# Data exploration\n\n@.  Inspect the dataset: \n\n    - How many rows and columns does it have?\n    - What are the column names?\n    - What type of data is stored in each column?\n    - Which values are stored?\n    - Are there any missing values?\n    - ...\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    # one function that shows you all of this information is skimr::skim().\n    skimr::skim(data)\n    ```\n    :::\n\n\n# Data management\n\n@.  Add a variable `ID` to the dataset that uniquely identifies each athlete.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    data$ID <- 1:nrow(data)\n    ```\n    :::\n\n\n@.  Rename the column `Sex [1=male]` to `Sex` and convert it from a numeric variable to a factor variable (with 1 = male, 2 = female).\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    # rename the column with dplyr::rename()\n    data <- dplyr::rename(data, Sex = `Sex [1=male]`)\n    \n    # convert it to a factor with factor().\n    data$Sex <- factor(data$Sex, levels = c(1, 2), \n                       labels = c(\"male\", \"female\"))\n    ```\n    :::\n\n    \n@.  The `table()` function is useful to count the distinct values of a variable (we did not cover this function in the workshop). Use it to count the number of females and males in the dataset by applying it to the `Sex` column.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    table(data$Sex)\n    ```\n    :::\n\n\n\n    \n# Data analysis\n\n@.  Athletes rated the delayed onset muscle soreness (DOMS) on a visual analogue scale from 0 to 100 at all three measurement points (variables `DOMS_Pre`, `DOMS_Post1`, and `DOMS_Post2`). Compute means and standard deviations for all three measurement points (1) across all athletes and (2) separately for females and males.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    library(dplyr)\n    \n    # across all athletes\n    summarize(data, \n              across(c(DOMS_Pre, DOMS_Post1, DOMS_Post2), mean))\n    summarize(data, \n              across(c(DOMS_Pre, DOMS_Post1, DOMS_Post2), sd))\n    \n    # separately by gender\n    summarize(group_by(data, Sex), \n              across(c(DOMS_Pre, DOMS_Post1, DOMS_Post2), mean))\n    summarize(group_by(data, Sex), \n              across(c(DOMS_Pre, DOMS_Post1, DOMS_Post2), sd))\n    ```\n    :::\n\n\n@.  For an ANOVA analysis, we need the data in a long format. This can be achieved with the `pivot_longer()` function from the `tidyr` package. However, we need a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) to separate the variable names into two columns (`names_sep = \"_(?=[^_]+$)\"`) because the variable names are irregular. We did not cover this in the workshop, but you can use the following code snippet to achieve this:\n\n    ```\n    library(tidyr)\n    \n    # use the pivot_longer() function as we have done in the workshop\n    # the only difference is that we use the regular expression in names_sep\n    # because the number of dashes varies in the variable names\n    data_long <- tidyr::pivot_longer(data, cols = -c(ID, Sex), \n                                     names_sep = \"_(?=[^_]+$)\",\n                                     names_to = c(\"Measurement\", \"Time\"), \n                                     values_to = \"Value\")\n    ```\n\n\n    ::: {.cell}\n    \n    :::\n\n\n    Make sure that you understand how this works in principle. You might ask ChatGPT for a detailed explanation of the regular expression if you are interested.\n\n@.  Based on `data_long`, conduct a mixed-effects ANOVA to examine the effect of `Sex` and `Time` on RPE measurements (`Session_RPE`) during the HIIT training .\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    library(afex)\n    \n    # the RPE measurements must be filtered from data_long for the analysis\n    data_anova <- dplyr::filter(data_long, Measurement == \"Session_RPE\")\n    \n    # estimate the ANOVA model\n    model <- afex::aov_4(Value ~ Sex + (Time | ID), data_anova)\n    ```\n    :::\n\n    \n    Note that the model automatically deletes participants with missing data.\n    \n@.  Follow up the significant main effect of `Time` with polynomial contrasts. First, use the `emmeans` package to estimate marginal means of `Time` from the ANOVA model and assign them to an object `emm`. Then, use `contrast(emm, \"poly\")` to get polynomial contrasts for the `Time` variable. Is there any evidence for a linear trend in the data?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    library(emmeans)\n    \n    # estimate the marginal means based on the ANOVA model\n    emm <- emmeans::emmeans(model, ~ Time)\n    \n    # use function provided in the instructions to estimate contrasts\n    emm_contrasts <- contrast(emm, \"poly\")\n    \n    # linear contrast is the first row of the output and significant\n    ```\n    :::\n\n\n# Data visualization\n\n@.  Create a plot that visualizes the estimated marginal means of `Time` along with their 95% confidence intervals with *ggplot2*.\n\n    - Convert the estimated means `emm` object to a data frame using the `as.data.frame()` function. Inspect the result to see in which columns the means and CIs are.\n    - Use the `ggplot()` function to create a plot with `Time` on the x-axis and the estimated marginal means on the y-axis.\n    - Add error bars to the plot using `geom_errorbar()`. Consult the documentation of `geom_errorbar()` to learn how to specify the `ymin` and `ymax` aesthetics. (Hint: Review the examples at the end of the documentation.)\n    - Add points to the plot using `geom_point()`.\n    - Change the theme to `theme_bw()`.\n    - Label the x-axis as \"Time\", the y-axis as \"Estimated marginal means of RPE\", and the title as \"Polynomial contrasts of RPE over time\".\n    - Save the plot as a PNG file in the figures folder of your project.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution\" code-line-numbers=\"false\"}\n    library(ggplot2)\n    \n    # convert estimated means object to a data frame\n    emm.df <- as.data.frame(emm) # inspect the data frame\n    \n    # create the plot\n    p <- ggplot(data = emm.df, aes(x = Time, y = emmean)) +\n      theme_bw() +\n      geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.1) +\n      geom_point() +\n      labs(x = \"Time\", y = \"Estimated marginal means of RPE\", \n           title = \"Polynomial contrasts of RPE over time\")\n    \n    # save the plot\n    ggsave(\"figures/polynomial_contrasts.png\", plot = p, \n           width = 6, height = 4, dpi = 300)\n    ```\n    :::\n\n    \n    Below you see the desired result.\n    \n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](startr-00_exercise-2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n    :::\n    :::\n\n    \nCongratulations, you made it to the end of the exercise! If you want, you can also try to reproduce the analyses from the paper.",
    "supporting": [
      "startr-00_exercise-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}