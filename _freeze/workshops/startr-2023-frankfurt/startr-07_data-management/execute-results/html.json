{
  "hash": "54c7148aa7b8ee1170a766af0f4286a9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Management\"\nsubtitle: \"StartR Workshop\"\ndescription: \"Merging | Reshaping | Aggregating | Pipes | Conditioning & Looping\"\nauthor: \"Maik Bieleke, PhD\"\ninstitute: \"University of Konstanz\"\ndate: 11/24/2024\ndate-format: long\nformat: \n  revealjs:\n    fontsize: 24pt\n    chalkboard: false\n    embed-resources: true\n    slide-number: true\n    theme: [simple, _styles/unikn.scss]\n    logo: _styles/icon.png\n    footer: \"[www.maikbieleke.com](https://www.maikbieleke.com)\"\n    margin: 0.2\n    incremental: false \n    slide-level: 2\n    highlight-style: a11y\n    preview-links: true\nfrom: markdown+emoji\nrevealjs-plugins:\n  - attribution\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n# Merging {background-color=\"white\" background-image=\"figures/merge.jpg\" background-opacity=\"0.2\"}\n\n::: footer\nPhoto courtesy of [@lg17](https://unsplash.com/de/@lg17)\n:::\n\n## What is merging?\n\nMerging is the process of combining two (or more) data sets into one. Merging requires that the data sets have at least one variable in common, usually an ID variable.\n\n:::: {.columns}\n::: {.column width=\"70%\"}\nThere are four types of merging:\n\n- **full join**: keep all observations from both data sets\n- **left join**: keep all observations from the left data set\n- **right join**: keep all observations from the right data set\n- **Inner join**: only keep observations that appear in both data sets\n\nWe use functinos from the `dplyr` package.\n:::\n\n::: {.column width=\"30%\"}\n![](figures/dplyr-hex.png)\n:::\n::::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(dplyr) # if not installed\nlibrary(dplyr)\n```\n:::\n\n\n## Types of merging\n\n![](figures/merging.jpg)\n\n\n## Examples\n\nWe create two data frames with the shared key variable `id`. They have observations from different participants and different variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create two data frames\ndfA <- data.frame(id = c(1, 2, 3), w = c(10, 8, 15), x = c(7, 9, 12))\ndfB <- data.frame(id = c(1, 2, 4), y = c(2, 10, 11), z = c(5, 5, 3))\n```\n:::\n\n\nNow we can use functions from the dplyr package to merge the data frames.\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::full_join(dfA, dfB)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id  w  x  y  z\n1  1 10  7  2  5\n2  2  8  9 10  5\n3  3 15 12 NA NA\n4  4 NA NA 11  3\n```\n\n\n:::\n\n```{.r .cell-code}\ndplyr::inner_join(dfA, dfB)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id  w x  y z\n1  1 10 7  2 5\n2  2  8 9 10 5\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::left_join(dfA, dfB)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id  w  x  y  z\n1  1 10  7  2  5\n2  2  8  9 10  5\n3  3 15 12 NA NA\n```\n\n\n:::\n\n```{.r .cell-code}\ndplyr::right_join(dfA, dfB)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id  w  x  y z\n1  1 10  7  2 5\n2  2  8  9 10 5\n3  4 NA NA 11 3\n```\n\n\n:::\n:::\n\n:::\n::::\n\n## Common problems\n\n- different names of the key variable\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  dfA <- data.frame(id = c(1, 2, 3), w = c(10, 8, 15), x = c(7, 9, 12))\n  dfB <- data.frame(IDENT = c(1, 2, 4), z = c(5, 5, 3))\n  dplyr::full_join(dfA, dfB, join_by(id == IDENT))\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n    id  w  x  z\n  1  1 10  7  5\n  2  2  8  9  5\n  3  3 15 12 NA\n  4  4 NA NA  3\n  ```\n  \n  \n  :::\n  :::\n\n  \n- multiple key variables\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  dfA <- data.frame(id = c(1, 1, 2, 2), wave = c(1, 2, 1, 2),\n                    anx = c(10, 8, 15, 16), dep = c(7, 9, 12, 11))\n  dfB <- data.frame(id = c(1, 1, 3, 3), wave = c(1, 2, 1, 2),\n                    ang = c(2, 4, 11, 11), dis = c(5, 5, 3, 5))\n  \n  dplyr::full_join(dfA, dfB, by = c(\"id\", \"wave\"))\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  \n  ```\n    id wave anx dep ang dis\n  1  1    1  10   7   2   5\n  2  1    2   8   9   4   5\n  3  2    1  15  12  NA  NA\n  4  2    2  16  11  NA  NA\n  5  3    1  NA  NA  11   3\n  6  3    2  NA  NA  11   5\n  ```\n  \n  \n  :::\n  :::\n\n\n\n\n\n\n# Reshaping {background-color=\"white\" background-image=\"figures/stapel.jpg\" background-opacity=\"0.2\"}\n\n::: footer\nPhoto courtesy of [@hansreniers](https://unsplash.com/de/@hansreniers)\n:::\n\n## What is reshaping?\n\n**Reshaping** is the process of transforming data without changing the data itself. \n\n\n:::: {.columns}\n::: {.column width=\"70%\"}\nThere are two types of reshaping:\n\n- **wide to long**: transform data from a wide format to a long format\n- **long to wide**: transform data from a long format to a wide format\n\nWe use functions from the `tidyr` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(tidyr) # if not installed\nlibrary(tidyr)\n```\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n![](figures/tidyr-hex.png)\n:::\n::::\n\n\n\n## Types of reshaping\n\n<!-- insert image -->\n\n\n\n## Wide-to-long\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n\n### Wide\n\nWe start with a data frame in a wide format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a wide data frame\ndfr <- data.frame(\n  id = c(1, 2), \n  a_1 = c(10, 8), \n  a_2 = c(7, 9),\n  b_1 = c(2, 11),\n  b_2 = c(5, 5))\ndfr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id a_1 a_2 b_1 b_2\n1  1  10   7   2   5\n2  2   8   9  11   5\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"60%\"}\n\n### Long\n\nTransform data frame to long format with `pivot_longer()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# from wide to long\ndfr_long <- pivot_longer(\n  dfr, cols = c(a_1, a_2, b_1, b_2),\n  names_to = \"variable\", \n  values_to = \"value\")\ndfr_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n     id variable value\n  <dbl> <chr>    <dbl>\n1     1 a_1         10\n2     1 a_2          7\n3     1 b_1          2\n4     1 b_2          5\n5     2 a_1          8\n6     2 a_2          9\n7     2 b_1         11\n8     2 b_2          5\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n## Long-to-wide\n\n:::: {.columns}\n::: {.column width=\"60%\"}\n\n### Long\n\nThis time, we start with a data frame in a wide format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a long data frame\ndfr <- data.frame(\n  id = c(1, 1, 1, 1, 2, 2, 2, 2),\n  variable = c(\"a_1\", \"a_2\", \"b_1\", \"b_2\",\n               \"a_1\", \"a_2\", \"b_1\", \"b_2\"),\n  value = c(10, 7, 2, 5, 8, 9, 11, 5))\ndfr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id variable value\n1  1      a_1    10\n2  1      a_2     7\n3  1      b_1     2\n4  1      b_2     5\n5  2      a_1     8\n6  2      a_2     9\n7  2      b_1    11\n8  2      b_2     5\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"40%\"}\n\n### Wide\n\nTransform data frame to wide with `pivot_wider()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfr_wide <- pivot_wider(\n  dfr,\n  names_from = \"variable\", \n  values_from = \"value\")\ndfr_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n     id   a_1   a_2   b_1   b_2\n  <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1    10     7     2     5\n2     2     8     9    11     5\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n\n## Hidden identifiers\n\nOften variable names in the wide format contain more than one piece of information. For example, the variable `a_1` contains information about the variable `a` and the time point `1`.  This is called a **hidden identifier**. \n\n:::: {.columns}\n::: {.column width=\"40%\"}\n\n### Wide\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a wide data frame\ndfr <- data.frame(\n  id = c(1, 2), \n  a_1 = c(10, 8), \n  a_2 = c(7, 9),\n  b_1 = c(2, 11),\n  b_2 = c(5, 5))\ndfr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id a_1 a_2 b_1 b_2\n1  1  10   7   2   5\n2  2   8   9  11   5\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"60%\"}\n\n### Long\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# from wide to long\ndfr_long <- pivot_longer(\n  dfr, cols = c(a_1, a_2, b_1, b_2),\n  names_to = c(\"variable\", \"time\"), \n  names_sep = \"_\",\n  values_to = \"value\")\ndfr_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n     id variable time  value\n  <dbl> <chr>    <chr> <dbl>\n1     1 a        1        10\n2     1 a        2         7\n3     1 b        1         2\n4     1 b        2         5\n5     2 a        1         8\n6     2 a        2         9\n7     2 b        1        11\n8     2 b        2         5\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n# Aggregation\n\n## What is aggregation?\n\nAggregation is the process of combining multiple observations into a single observation.\n\n:::: {.columns}\n::: {.column width=\"70%\"}\nThere are two types of aggregation:\n\n- **column-wise**: combine observations from individual columns\n- **row-wise**: combine observations from multiple columns\n\nWe use functinos from the `dplyr` package.\n:::\n\n::: {.column width=\"30%\"}\n![](figures/dplyr-hex.png)\n:::\n::::\n\n\n\n## Colum-wise aggregation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a wide data frame\ndfr <- data.frame(id = c(1, 2, 3), a_1 = c(10, 8, 5), a_2 = c(7, 9, 2),\n                  b_1 = c(2, 11, 8),  b_2 = c(5, 5, 3))\n```\n:::\n\n\nCompute various colum-wise statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute mean of a single variable\nsummarize(dfr, MEAN = mean(a_1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      MEAN\n1 7.666667\n```\n\n\n:::\n\n```{.r .cell-code}\n# Compute mean and standard deviation of a single variable\nsummarize(dfr, MEAN = mean(a_1), SD = sd(a_1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      MEAN       SD\n1 7.666667 2.516611\n```\n\n\n:::\n\n```{.r .cell-code}\n# Compute mean of multiple variables\nsummarize(dfr, across(c(a_1, b_2), mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       a_1      b_2\n1 7.666667 4.333333\n```\n\n\n:::\n\n```{.r .cell-code}\n# Compute mean and standard deviation of multiple variables\nsummarize(dfr, across(c(a_1, b_2), list(MEAN = ~mean(.x), SD = ~sd(.x))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  a_1_MEAN   a_1_SD b_2_MEAN   b_2_SD\n1 7.666667 2.516611 4.333333 1.154701\n```\n\n\n:::\n:::\n\n\n\n\n## Row-wise aggregation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a wide data frame\ndfr <- data.frame(id = c(1, 2, 3), a_1 = c(10, 8, 5), a_2 = c(7, 9, 2),\n                  b_1 = c(2, 11, 8),  b_2 = c(5, 5, 3))\n```\n:::\n\n\nCompute various row-wise statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute mean of multiple variables\nsummarize(rowwise(dfr), MEAN = mean(c(a_1, a_2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n   MEAN\n  <dbl>\n1   8.5\n2   8.5\n3   3.5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Compute mean and standard deviationof multiple variables\nsummarize(rowwise(dfr), MEAN = mean(c(a_1, a_2)), SD = sd(c(a_1, a_2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n   MEAN    SD\n  <dbl> <dbl>\n1   8.5 2.12 \n2   8.5 0.707\n3   3.5 2.12 \n```\n\n\n:::\n:::\n\n\n\n\n## Groupwise aggregation\n\nWe can aggregate for different groups separately using `group_by()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a wide data frame\ndfr <- data.frame(id = c(1, 2, 3, 4), condition = c(\"A\", \"A\", \"B\", \"B\"),\n                  a_1 = c(10, 8, 5, 7), a_2 = c(7, 9, 2, 5),\n                  b_1 = c(2, 11, 8, 4),  b_2 = c(5, 5, 3, 1))\ndfr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id condition a_1 a_2 b_1 b_2\n1  1         A  10   7   2   5\n2  2         A   8   9  11   5\n3  3         B   5   2   8   3\n4  4         B   7   5   4   1\n```\n\n\n:::\n:::\n\n\nAggregate for conditions A and B:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute mean of a single variable for each condition\nsummarize(group_by(dfr, condition), MEAN = mean(a_1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  condition  MEAN\n  <chr>     <dbl>\n1 A             9\n2 B             6\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n# Loops and conditionals {background-color=\"white\" background-image=\"figures/loop.jpg\" background-opacity=\"0.2\"}\n\n## What is a loop?\n\nA loop is used to repeat a sequence of commands multiple times, each time using a different value of a loop index.\n\nA loop consists of\n\n- a **loop index** (e.g., `i`) that takes on different values\n- a **loop vector** (e.g., `1:3`) with all values that the loop index should take\n- a **loop expression** (e.g., `print(i)`) with the commands to be executed for each value of the loop index\n\nThese elements are combined in a **loop statement**:\n\n`for(index in vector){expression}`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:3){print(i)}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 2\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n## Example\n\nLet's use the example from above, where we computed means for different columns of a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a wide data frame\ndfr <- data.frame(id = c(1, 2, 3), a_1 = c(10, 8, 5), a_2 = c(7, 9, 2),\n                  b_1 = c(2, 11, 8),  b_2 = c(5, 5, 3))\n\nfor(column in c(\"a_1\", \"a_2\", \"b_1\", \"b_2\")){\n  var <- dfr[, column]\n  MEAN <- mean(var)\n  print(MEAN)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.666667\n[1] 6\n[1] 7\n[1] 4.333333\n```\n\n\n:::\n:::\n\n\nLoops are rarely efficient, but especially beginners often use them because they are intuitive.\n\n\n\n## What is a conditional?\n\nA conditional is used to execute commands only if a certain condition is met. They typically consist of **if and else statements**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(1 > 0){\n  print(\"1 is larger than 0\")\n} else {\n  print(\"1 is not larger than 0\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1 is larger than 0\"\n```\n\n\n:::\n:::\n\n\nA frequently used special form is the `ifelse()` statement, which can be used to replace the values of a vector depending on a condition.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"smaller\" \"smaller\" \"smaller\" \"smaller\" \"smaller\" \"larger\"  \"larger\" \n [8] \"larger\"  \"larger\"  \"larger\" \n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}