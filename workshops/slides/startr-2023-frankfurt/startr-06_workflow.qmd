---
title: "Workflow"
subtitle: "StartR Workshop"
description: "Organization | Datasets | Coding | Documentation"
author: "Maik Bieleke, PhD"
institute: "University of Konstanz"
date: 11/24/2024
date-format: long
format: 
  revealjs:
    fontsize: 24pt
    chalkboard: false
    embed-resources: true
    slide-number: true
    theme: [simple, _styles/unikn.scss]
    logo: _styles/icon.png
    footer: "[www.maikbieleke.com](https://www.maikbieleke.com)"
    margin: 0.2
    incremental: false 
    slide-level: 2
    highlight-style: a11y
    preview-links: true
from: markdown+emoji
revealjs-plugins:
  - attribution
---

# Organization {background-color="white" background-image="figures/organization.jpg" background-opacity="0.2"}

::: footer
Photo courtesy of [@shawnanggg](https://unsplash.com/de/@shawnanggg)
:::


## Workspace

:::: {.columns}
::: {.column width="50%"}
It is highly recommended to deactivate automatic saving and restoring of the workspace because it can lead to unexpected results.

You can deactivate it in the **Global Options** under **General - Workspace**.
:::

::: {.column width="50%"}
![](figures/workspace.png)
:::
::::



## Working directory

The working directory is the directory from which R will read and write files. You can check the current working directory with `getwd()`.

```{r}  
#| echo: true  
#| code-line-numbers: false
#| class: output

getwd()
```





## Absolute and relative paths

- **Absolute paths** start from the root directory (on windows: `C:\`) and specify the complete location of a file or directory.

  Example: `C:/Users/MMuster/Docs/intro2r/figures/pic.png`
  
  - hard to read and write
  - break when moving files or directories
  - not portable across operating systems or users
  
- **Relative paths** start from the current working directory and specify the location of a file or directory relative to the current working directory.

  Example: `figures/workflow.png` when the current working directory is the `intro2r` directory.  






## Projects

:::: {.columns}
::: {.column width="50%"}
**Projects** helps you to organize your work. Each project has its own working directory, workspace, and files. In general, it is recommended to have one project for each analysis you are working on.

Projects can be created in the **File** menu either in a new directory or in an existing directory. This will produce a `.Rproj ` file that you can double-click to open the project.
:::
::: {.column width="50%"}
![](figures/projects.png)
:::
::::



::: footer
[https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects)
:::



## Directory structure

:::: {.columns}
::: {.column width="70%"}
It is good practice to structure your projects' working directory in a consistent way.

An example from Douglas et al. (2023) is shown on the right. You can adjust it to your needs.
:::
::: {.column width="30%"}
![](figures/directory-structure.png)
:::
::::

::: footer
[Douglas et al. (2023)](https://intro2r.com/dir_struct.html)
:::



## Data import and export

::: {.columns}
:::: {.column width="60%"}
The **rio** package (= **R** **I**mport and **E**xport) is a Swiss-Army knife for data import and export from and to various file formats. 

```{r}
#| echo: true
#| code-line-numbers: false
# install.packages("rio")
library(rio)
```


It has two main functions:

-  `import()`: Import data
   ```{r}
   #| echo: true
   
   # Import and assign the fifa dataset
   fifa <- rio::import("data/fifa.csv")
   ```


-  `export()`: Export data
   ```{r}
   #| echo: true
   #| eval: false
   
   # Export the fifa dataset
   rio::export(fifa, "data/fifa.xlsx")
   ```

Note that rio automatically detects the file format based on the file extension.

::::
:::: {.column width="40%"}
![](figures/swiss-knife.png)
::::
:::

::: {.attribution}
Image: [Pixabay](https://pixabay.com/de/vectors/schweizer-taschenmesser-messer-152394/)
:::

::: footer
[https://cran.r-project.org/web/packages/rio/index.html](https://cran.r-project.org/web/packages/rio/index.html)
:::



## Exercise :pencil2: {background-color="white" background-image="figures/construction.jpg" background-opacity=0.2}

::: {.attribution}
Photo courtesy of [@fonsheijnsbroek_amsterdam_photos](https://unsplash.com/@fonsheijnsbroek_amsterdam_photos)
:::


1.  Create two projects for analyzing the FIFA and HIIT data.

2.  Establish directory structures with three folders: 

    - `data`
    - `figures`
    - `scripts`

3.  Copy the all datasets into the corresponding `data` file.

4.  Import the datasets `fifa.xlsx` and `hiit.xlsx`.




# Coding {background-color="white" background-image="figures/coding.jpg" background-opacity="0.2"}

::: footer
Photo by [StockSnap](https://pixabay.com/de/users/stocksnap-894430/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2557644) on [Pixabay](https://pixabay.com/de//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2557644)
:::


## Sections

:::: {.columns}
::: {.column width="60%"}
Sections can help to structure a script. They start with a comment (`#`) followed by the section's name and at least four dashes (`-`). You can also insert them via the "Code - Insert Section" menu (Ctrl/CMD + Shift + R).

- **Code folding:** Section content can be collapsed and expanded.
- **Code outline:** Sections are added to the script outline.
- **Code navigation:** Sections show up in the code navigation. drop-down.
:::
::: {.column width="40%"}
![](figures/sections.png)
:::
::::

```{r}  
#| echo: true  
#| code-line-numbers: false
#| class: output

# Load Data ---------------------------------------------------------------

# Plot Data ---------------------------------------------------------------
```



## Code autocompletion

RStudio offers code completion with fuzzy narrowing. It can be triggered by pressing the tab key.

- packages
- functions and arguments
- files and paths

**Snippets** are templates for common code patterns. They can be triggered by entering a prefix and pressing the tab key twice.

- `ts` + tab + tab: insert current date and time
- `lib` + tab + tab: insert library() call

To create custom snippets: Tools - Global Options - Code - Edit Snippets.



## Diagnostics

RStudio can help you to find problems in your code.

:::: {.columns}
::: {.column width="60%"}
- **Syntax errors** are marked with a red cross at the left margin and a red squiggly line. Hover the mouse over them to see the message.
:::
::: {.column width="40%"}
![](figures/diagnostics_error.png)
:::
::::

:::: {.columns}
::: {.column width="60%"}
- **Warning messages** are marked with a yellow exclamation mark at the left margin and a yellow squiggly line. Hover the mouse over them to see the message.
:::
::: {.column width="40%"}
![](figures/diagnostics_warning.png)
:::
::::

Note that you must save the file to see the diagnostics.


## Style guide

:::: {.columns}
::: {.column width="60%"}
Review the tidyverse style guide for tips on 

- proper file names
- good code syntax
- working with functions
- ...
:::
::: {.column width="40%"}
![](figures/finaldoc.jpg)
:::
::::

::: footer
[https://style.tidyverse.org/index.html](https://style.tidyverse.org/index.html)
:::



# Documentation {background-color="white" background-image="figures/documentation.jpg" background-opacity="0.2"}

::: footer
Photo courtesy of [@beatriz_perez](https://unsplash.com/de/@beatriz_perez)
:::



## Information about the session

The `sessionInfo()` function shows information about the current R session. This includes loaded packages and their versions, the operating system, and the R version.

```{r}
#| echo: true  
#| code-line-numbers: false
sessionInfo()
```


## Citing R

The `citation()` function shows the citation for R.

```{r}
#| echo: true  
#| code-line-numbers: false
citation()
```



## Citing packages

The `citation()` function  can also be used to show the citation for a package.

```{r}
#| echo: true  
#| code-line-numbers: false
citation("ggplot2")
```


## Advanced documentation

There are serveral advanced ways to document your code:

- markdown files
- interactive notebooks
- version control





