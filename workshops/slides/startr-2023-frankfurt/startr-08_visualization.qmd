---
title: "Exploration and Visualization"
subtitle: "StartR Workshop"
description: "Data exploration | ggplot2 visualization"
author: "Maik Bieleke, PhD"
institute: "University of Konstanz"
date: 11/24/2024
date-format: long
format: 
  revealjs:
    fontsize: 24pt
    chalkboard: false
    embed-resources: true
    slide-number: true
    theme: [simple, _styles/unikn.scss]
    logo: _styles/icon.png
    footer: "[www.maikbieleke.com](https://www.maikbieleke.com)"
    margin: 0.2
    incremental: false 
    slide-level: 2
    highlight-style: a11y
    preview-links: true
from: markdown+emoji
revealjs-plugins:
  - attribution
---

```{r}
library(rio)
library(dplyr)
fifa <- import("fifa/data/fifa.xlsx")
```

# Data Exploration

## The data viewer

:::: {.columns}
::: {.column width="50%"}
RStudio has a built-in data viewer. You can open it by clicking on the dataset in the Environment pane or by applying the `View()` function to the dataset. It allows you to

- sort columns
- filter rows
- search for text

:::
::: {.column width="50%"}
![](figures/viewer.png)
:::
::::

::: footer
[https://support.posit.co/hc/en-us/articles/205175388-Using-the-Data-Viewer-in-the-RStudio-IDE](https://support.posit.co/hc/en-us/articles/205175388-Using-the-Data-Viewer-in-the-RStudio-IDE)
:::


## Overview with `str()`

A good overview of the structure of the dataset can be obtained with base R function `str()`.

```{r}
#| echo: true
str(fifa)
```


## Overview with `glimpse()`

An alternative is the `dplyr::glimpse()` function.

```{r}
#| echo: true
dplyr::glimpse(fifa)
```



## Dataset properties

- number of rows
  ```{r}
  #| echo: true
  nrow(fifa)
  ```

- number of columns
  ```{r}
  #| echo: true
  ncol(fifa)
  ```

- dimensions (rows x columns)
  ```{r}
  #| echo: true
  dim(fifa)
  ```

- names of the variables
  ```{r}
  #| echo: true
  names(fifa)
  ```
  

## First and last rows with `head()` and `tail()`

- show the first 3 rows

  ```{r}
  #| echo: true
  head(fifa, 3) 
  ```
  
- show the last 3 rows

  ```{r}
  #| echo: true
  tail(fifa, 3)
  ```



## Overview of the dataset with `skimr()` {.scrollable}

```{r}
#| echo: true
#| eval: false
skimr::skim(fifa)
```

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
── Data Summary ────────────────────────
                           Values
Name                       fifa  
Number of rows             17660 
Number of columns          13    
_______________________          
Column type frequency:           
  character                4     
  numeric                  9     
________________________         
Group variables            None  

── Variable type: character ─────────────────────────────────────────────────────────────────────────────────────
  skim_variable n_missing complete_rate min max empty n_unique whitespace
1 Name                  0             1   3  25     0    17140          0
2 Nationality           0             1   4  24     0      161          0
3 Club                  0             1   0  45   211      927          0
4 Foot                  0             1   4   5     0        2          0

── Variable type: numeric ───────────────────────────────────────────────────────────────────────────────────────
  skim_variable n_missing complete_rate       mean          sd  p0     p25    p50      p75      p100 hist 
1 ID                    0             1  246319.     31488.     16 240732. 257041  263028.    271340 ▁▁▁▁▇
2 Age                   0             1      23.1        4.64   15     20      22      26         54 ▇▅▁▁▁
3 Height                0             1     181.         6.96  149    176     181     186        206 ▁▁▇▅▁
4 Weight                0             1      74.3        6.98   48     70      74      79        110 ▁▆▇▁▁
5 Overall               0             1      63.4        8.04   43     58      63      69         91 ▂▇▆▃▁
6 Potential             0             1      71.0        6.53   42     67      71      75         95 ▁▂▇▅▁
7 Value                 0             1 2739788.   7841276.      0 325000  700000 1725000  190500000 ▇▁▁▁▁
8 Wage                  0             1    8190.     20477.      0    550    2000    6000     450000 ▇▁▁▁▁
9 Reputation            0             1       1.11       0.407   1      1       1       1          5 ▇▁▁▁▁
```



## Plotting in R

There are many ways to create plots in R.

- Base R graphics  
- `lattice` graphics
- `ggplot2` graphics
- ...









# The `ggplot2` Package {background-color="white" background-image="figures/ggplot2-hex.png" background-opacity="0.2"}

## Grammar of Graphics

:::: {.columns}
::: {.column width="70%"}
![Leland Wilkinson](figures/wilkinson.jpg){fig-align="left"}
:::
::: {.column width="30%"}
![](figures/grammar-of-graphics.jpg)
:::
::::

## `ggplot2`

:::: {.columns}
::: {.column width="30%"}
![](figures/ggplot2-book.jpg)
:::
::: {.column width="70%"}
![Hadley Wickham](figures/wickham.jpg){fig-align="left"}
:::
::::



## Installing and loading ggplot2

We need to install the `ggplot2` package once.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

install.packages("ggplot2") # if not already installed
```

Now we can load the package into our current R session.

```{r}
#| echo: true
#| code-line-numbers: false

library(ggplot2)
```



## The `ggplot()` function

Every plot is initialized with the `ggplot()` function. It has two main arguments:

-   `data` specifies the data frame to be used
-   `mapping` specifies how variables are mapped to visual properties (aesthetics) of geoms

::: callout-important
## Aesthetics are the visual properties of geoms (e.g., position, color, size).
:::











# Basic plotting

## Data

We first specify the data frame to be used for plotting. This provides variables (columns) and observations (rows).

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(data = fifa)
```



## Global aesthetics

We map variables of the data frame to global visual properties (aesthetics) of the plot. Here, `Overall` and `Wage` are mapped to x and y positions.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(data = fifa, mapping = aes(x = Overall, y = Wage))
```



## Geometric objects

We add geometric objects (geoms) with `+` and `geom_*()`. Here, we draw points at all x and y positions.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Overall, y = Wage)) + geom_point()

```











# More geoms and aesthetics

## Adding geoms

Geometric layers can be stacked to create more complex plots. Just add more `+ geom_*()` calls.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4

ggplot(fifa, aes(x = Overall, y = Wage)) +
  geom_point() + geom_smooth()

```



## Adding global aesthetics

Additional global aesthetics can be added to the `ggplot()` function. They will be applied to all geoms.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4

ggplot(fifa, aes(x = Overall, y = Wage, color = Foot)) +
  geom_point() +
  geom_smooth()

```



## Adding local aesthetics

Aesthetics can also be added locally to affect only a single geom.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4

ggplot(fifa, aes(x = Overall, y = Wage)) +
  geom_point() +
  geom_smooth(aes(color = Foot))
```












# Common types of plots

## Histograms and density plots

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Overall)) + 
  geom_histogram()
```

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Overall)) + 
  geom_density()
```
:::
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Overall)) + 
  geom_histogram(color = "white")
```
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Overall)) + 
  geom_density(aes(color = Foot))
```
:::
::::



## Boxplots and violin plots

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Overall)) + 
  geom_boxplot()
```

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Foot, y = Overall)) + 
  geom_violin()
```
:::
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Overall)) + 
  geom_boxplot(aes(fill = Foot))
```

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Foot, y = Overall)) + 
  geom_violin() + geom_boxplot(width = 0.1) 
```
:::
::::



## Barplots

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Foot)) + 
  geom_bar()
```

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Reputation, 
                 fill = Foot)) + 
  geom_bar(position = "stack")
```
:::
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Foot)) + 
  geom_bar(aes(fill = Foot))
```

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(fifa, aes(x = Reputation, 
                 fill = Foot)) + 
  geom_bar(position = "dodge")
```
:::
::::










# Fine-tuning plots

## Facets

Facets can be used to create multiple plots based on a categorical variable.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

# Create a plot for each foot
ggplot(fifa, aes(x = Overall, y = Wage)) + 
  geom_point() + geom_smooth() +
  facet_wrap(~ Foot)
```

## Scales

Scales control the mapping from data to aesthetics. They can be manually changed with `scale_*` functions.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

# Change the color used for the points
ggplot(fifa, aes(x = Overall, y = Wage, color = Foot)) + 
  geom_point() + 
  scale_color_manual(values = c("blue", "red")) +
  labs(x = "Ability Score", y = "Wage in KEuro", 
       title = "Relationship between Ability and Wage",
       color = "Preferred Foot")
```

## Theme elements

Theme elements control the non-data components of the plot. They can be changed with `theme()` function.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

# Change the position of the legend from the right to the bottom
ggplot(fifa, aes(x = Overall, y = Wage, color = Foot)) + 
  geom_point() + 
  theme(legend.position = "bottom")
```

## Themes

Themes change the overall appearance of the plot. They can be changed with `theme_*` functions.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

# Use the black and white (bw) theme
ggplot(fifa, aes(x = Overall, y = Wage, color = Foot)) + 
  geom_point() + 
  theme_bw()
```



# Saving plots

## The `ggsave()` function

The `ggsave()` function saves plots to a file. By default, the last plot is saved into your current working directory.

-   The `filename` argument specifies the file name. The file type is automatically determined by the file extension (e.g., PNG, JPG).
-   The optional `path` argument specifies the path to the file.
-   The optional `width` and `height` arguments specify the width and height of the plot.

## Example

The following code saves a plot as a PNG file into the "figures" folder of the current working directory. The plot is named "myplot" and has a width of 9 inches and a height of 4 inches.

```{r}
#| echo: true
#| eval: false

ggsave(filename = "figures/myplot.png", 
       width = 9, height = 4)
```

There are several additional options, e.g.

-   `plot` to specify the plot to be saved
-   `dpi` to specify the resolution of the plot
-   `units` to specify the units of the width and height arguments


