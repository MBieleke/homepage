---
title: "StartR Workshop"
subtitle: "-- Data Management --"
description: "Merging | Reshaping | Aggregating | Pipes | Conditioning & Looping"
author: "Maik Bieleke, PhD"
institute: "University of Konstanz"
date: 11/24/2024
date-format: long
format: 
  revealjs:
    fontsize: 24pt
    chalkboard: false
    embed-resources: true
    slide-number: true
    theme: [simple, _styles/unikn.scss]
    logo: _styles/icon.png
    footer: "[www.maikbieleke.com](https://www.maikbieleke.com)"
    margin: 0.2
    incremental: false 
    slide-level: 2
    highlight-style: a11y
    preview-links: true
from: markdown+emoji
revealjs-plugins:
  - attribution
---

```{r}
library(dplyr)
library(tidyr)
```










# Merging {background-color="white" background-image="figures/merge.jpg" background-opacity="0.2"}

::: footer
Photo courtesy of [@lg17](https://unsplash.com/de/@lg17)
:::

## What is merging?

Merging is the process of combining two (or more) data sets into one. Merging requires that the data sets have at least one variable in common, usually an ID variable.

:::: {.columns}
::: {.column width="70%"}
There are four types of merging:

- **full join**: keep all observations from both data sets
- **left join**: keep all observations from the left data set
- **right join**: keep all observations from the right data set
- **Inner join**: only keep observations that appear in both data sets

We use functinos from the `dplyr` package.
:::

::: {.column width="30%"}
![](figures/dplyr-hex.png)
:::
::::



```{r}
#| echo: true
#| eval: false
install.packages(dplyr) # if not installed
library(dplyr)
```

## Types of merging

![](figures/merging.jpg)


## Examples

We create two data frames with the shared key variable `id`. They have observations from different participants and different variables.

```{r}
#| echo: true

# Create two data frames
dfA <- data.frame(id = c(1, 2, 3), w = c(10, 8, 15), x = c(7, 9, 12))
dfB <- data.frame(id = c(1, 2, 4), y = c(2, 10, 11), z = c(5, 5, 3))
```

Now we can use functions from the dplyr package to merge the data frames.

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: true

dplyr::full_join(dfA, dfB)
dplyr::inner_join(dfA, dfB)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true

dplyr::left_join(dfA, dfB)
dplyr::right_join(dfA, dfB)
```
:::
::::

## Common problems

- different names of the key variable
  ```{r}
  #| echo: true
  dfA <- data.frame(id = c(1, 2, 3), w = c(10, 8, 15), x = c(7, 9, 12))
  dfB <- data.frame(IDENT = c(1, 2, 4), z = c(5, 5, 3))
  dplyr::full_join(dfA, dfB, join_by(id == IDENT))
  ```
  
- multiple key variables
  ```{r}
  #| echo: true
  dfA <- data.frame(id = c(1, 1, 2, 2), wave = c(1, 2, 1, 2),
                    anx = c(10, 8, 15, 16), dep = c(7, 9, 12, 11))
  dfB <- data.frame(id = c(1, 1, 3, 3), wave = c(1, 2, 1, 2),
                    ang = c(2, 4, 11, 11), dis = c(5, 5, 3, 5))
  
  dplyr::full_join(dfA, dfB, by = c("id", "wave"))
  ```





# Reshaping {background-color="white" background-image="figures/stapel.jpg" background-opacity="0.2"}

::: footer
Photo courtesy of [@hansreniers](https://unsplash.com/de/@hansreniers)
:::

## What is reshaping?

**Reshaping** is the process of transforming data without changing the data itself. 


:::: {.columns}
::: {.column width="70%"}
There are two types of reshaping:

- **wide to long**: transform data from a wide format to a long format
- **long to wide**: transform data from a long format to a wide format

We use functions from the `tidyr` package.

```{r}
#| echo: true
#| eval: false
install.packages(tidyr) # if not installed
library(tidyr)
```
:::

::: {.column width="30%"}
![](figures/tidyr-hex.png)
:::
::::



## Types of reshaping

<!-- insert image -->



## Wide-to-long

:::: {.columns}
::: {.column width="40%"}

### Wide

We start with a data frame in a wide format.

```{r}
#| echo: true

# Define a wide data frame
dfr <- data.frame(
  id = c(1, 2), 
  a_1 = c(10, 8), 
  a_2 = c(7, 9),
  b_1 = c(2, 11),
  b_2 = c(5, 5))
dfr
```
:::
::: {.column width="60%"}

### Long

Transform data frame to long format with `pivot_longer()`.

```{r}
#| echo: true

# from wide to long
dfr_long <- pivot_longer(
  dfr, cols = c(a_1, a_2, b_1, b_2),
  names_to = "variable", 
  values_to = "value")
dfr_long
```
:::
::::


## Long-to-wide

:::: {.columns}
::: {.column width="60%"}

### Long

This time, we start with a data frame in a wide format.

```{r}
#| echo: true

# Define a long data frame
dfr <- data.frame(
  id = c(1, 1, 1, 1, 2, 2, 2, 2),
  variable = c("a_1", "a_2", "b_1", "b_2",
               "a_1", "a_2", "b_1", "b_2"),
  value = c(10, 7, 2, 5, 8, 9, 11, 5))
dfr
```
:::
::: {.column width="40%"}

### Wide

Transform data frame to wide with `pivot_wider()`:

```{r}
#| echo: true

dfr_wide <- pivot_wider(
  dfr,
  names_from = "variable", 
  values_from = "value")
dfr_wide
```
:::
::::



## Hidden identifiers

Often variable names in the wide format contain more than one piece of information. For example, the variable `a_1` contains information about the variable `a` and the time point `1`.  This is called a **hidden identifier**. 

:::: {.columns}
::: {.column width="40%"}

### Wide

```{r}
#| echo: true

# Define a wide data frame
dfr <- data.frame(
  id = c(1, 2), 
  a_1 = c(10, 8), 
  a_2 = c(7, 9),
  b_1 = c(2, 11),
  b_2 = c(5, 5))
dfr
```
:::
::: {.column width="60%"}

### Long

```{r}
#| echo: true

# from wide to long
dfr_long <- pivot_longer(
  dfr, cols = c(a_1, a_2, b_1, b_2),
  names_to = c("variable", "time"), 
  names_sep = "_",
  values_to = "value")
dfr_long
```
:::
::::


# Aggregation

## What is aggregation?

Aggregation is the process of combining multiple observations into a single observation.

:::: {.columns}
::: {.column width="70%"}
There are two types of aggregation:

- **column-wise**: combine observations from individual columns
- **row-wise**: combine observations from multiple columns

We use functinos from the `dplyr` package.
:::

::: {.column width="30%"}
![](figures/dplyr-hex.png)
:::
::::



## Colum-wise aggregation

```{r}
#| echo: true

# Define a wide data frame
dfr <- data.frame(id = c(1, 2, 3), a_1 = c(10, 8, 5), a_2 = c(7, 9, 2),
                  b_1 = c(2, 11, 8),  b_2 = c(5, 5, 3))
```

Compute various colum-wise statistics:

```{r}
#| echo: true

# Compute mean of a single variable
summarize(dfr, MEAN = mean(a_1))

# Compute mean and standard deviation of a single variable
summarize(dfr, MEAN = mean(a_1), SD = sd(a_1))

# Compute mean of multiple variables
summarize(dfr, across(c(a_1, b_2), mean))

# Compute mean and standard deviation of multiple variables
summarize(dfr, across(c(a_1, b_2), list(MEAN = ~mean(.x), SD = ~sd(.x))))
```



## Row-wise aggregation

```{r}
#| echo: true

# Define a wide data frame
dfr <- data.frame(id = c(1, 2, 3), a_1 = c(10, 8, 5), a_2 = c(7, 9, 2),
                  b_1 = c(2, 11, 8),  b_2 = c(5, 5, 3))
```

Compute various row-wise statistics:

```{r}
#| echo: true

# Compute mean of multiple variables
summarize(rowwise(dfr), MEAN = mean(c(a_1, a_2)))

# Compute mean and standard deviationof multiple variables
summarize(rowwise(dfr), MEAN = mean(c(a_1, a_2)), SD = sd(c(a_1, a_2)))
```



## Groupwise aggregation

We can aggregate for different groups separately using `group_by()`.

```{r}
#| echo: true

# Define a wide data frame
dfr <- data.frame(id = c(1, 2, 3, 4), condition = c("A", "A", "B", "B"),
                  a_1 = c(10, 8, 5, 7), a_2 = c(7, 9, 2, 5),
                  b_1 = c(2, 11, 8, 4),  b_2 = c(5, 5, 3, 1))
dfr
```

Aggregate for conditions A and B:

```{r}
#| echo: true

# Compute mean of a single variable for each condition
summarize(group_by(dfr, condition), MEAN = mean(a_1))
```








# Loops and conditionals {background-color="white" background-image="figures/loop.jpg" background-opacity="0.2"}

## What is a loop?

A loop is used to repeat a sequence of commands multiple times, each time using a different value of a loop index.

A loop consists of

- a **loop index** (e.g., `i`) that takes on different values
- a **loop vector** (e.g., `1:3`) with all values that the loop index should take
- a **loop expression** (e.g., `print(i)`) with the commands to be executed for each value of the loop index

These elements are combined in a **loop statement**:

`for(index in vector){expression}`

```{r}
#| echo: true
for(i in 1:3){print(i)}
```



## Example

Let's use the example from above, where we computed means for different columns of a data frame.

```{r}
#| echo: true

# Define a wide data frame
dfr <- data.frame(id = c(1, 2, 3), a_1 = c(10, 8, 5), a_2 = c(7, 9, 2),
                  b_1 = c(2, 11, 8),  b_2 = c(5, 5, 3))

for(column in c("a_1", "a_2", "b_1", "b_2")){
  var <- dfr[, column]
  MEAN <- mean(var)
  print(MEAN)
}
```

Loops are rarely efficient, but especially beginners often use them because they are intuitive.



## What is a conditional?

A conditional is used to execute commands only if a certain condition is met. They typically consist of **if and else statements**.


```{r}
#| echo: true
if(1 > 0){
  print("1 is larger than 0")
} else {
  print("1 is not larger than 0")
}

```

A frequently used special form is the `ifelse()` statement, which can be used to replace the values of a vector depending on a condition.

```{r}
# Vector from 1 to 10 replaced by "larger" if larger than 5, otherwise "smaller"
ifelse(1:10 > 5, "larger", "smaller")
```