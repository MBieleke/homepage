---
title: "Exploration and Visualization"
subtitle: "Methodenfortbildung der ASP"
author: "**Maik Bieleke, PhD**"
institute: "University of Konstanz"
date: 11/16/2024
date-format: long
format: 
  revealjs:
    transition: slide
    fontsize: 20pt
    chalkboard: true
    slide-number: true
    theme: [simple, _styles/unikn.scss]
    footer: "[https://maikbieleke.com/workshops/startr-2024-asp/](https://maikbieleke.com/workshops/startr-2024-asp/)"
    margin: 0.25
    highlight-style: a11y
from: markdown+emoji
revealjs-plugins:
  - attribution
---

```{r}
library(rio)
library(dplyr)
pes <- import("data/pes.csv")
pes <- pes %>% filter(gender != "")
```

# Data Exploration

## The data viewer

:::: {.columns}
::: {.column width="50%"}
RStudio has a built-in data viewer. You can open it by clicking on the dataset in the Environment pane or by applying the `View()` function to the dataset. It allows you to

- sort columns
- filter rows
- search for text

:::
::: {.column width="50%"}
![](figures/07-exploration/viewer.png)
:::
::::

::: footer
[https://support.posit.co/hc/en-us/articles/205175388-Using-the-Data-Viewer-in-the-RStudio-IDE](https://support.posit.co/hc/en-us/articles/205175388-Using-the-Data-Viewer-in-the-RStudio-IDE)
:::


## Overview with `str()`

A good overview of the structure of the dataset can be obtained with base R function `str()`.

```{r}
#| echo: true
str(pes)
```


## Overview with `glimpse()`

An alternative is the `dplyr::glimpse()` function.

```{r}
#| echo: true
dplyr::glimpse(pes)
```



## Dataset properties

::: {.incremental}

- number of rows
  ```{r}
  #| echo: true
  nrow(pes)
  ```

- number of columns
  ```{r}
  #| echo: true
  ncol(pes)
  ```

- dimensions (rows x columns)
  ```{r}
  #| echo: true
  dim(pes)
  ```

- names of the variables
  ```{r}
  #| echo: true
  names(pes)
  ```

:::
  

## First and last rows with `head()` and `tail()`

::: {.incremental}

- show the first 3 rows

  ```{r}
  #| echo: true
  head(pes, 3) 
  ```
  
- `tail(pes, 3)` would show the last 3 rows

:::


## Overview of the dataset with `skimr()` {.scrollable}

```{r}
#| echo: true
#| eval: false
skimr::skim(pes)
```

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
── Data Summary ────────────────────────
                           Values
Name                       pes   
Number of rows             297   
Number of columns          28    
_______________________          
Column type frequency:           
  character                2     
  numeric                  26    
________________________         
Group variables            None  

── Variable type: character ──────────────────────────────────────────────────────────────────────────────────────────────
  skim_variable n_missing complete_rate min max empty n_unique whitespace
1 id                    0             1   1   6     0      296          0
2 gender                0             1   0   6     8        3          0

── Variable type: numeric ────────────────────────────────────────────────────────────────────────────────────────────────
   skim_variable        n_missing complete_rate    mean       sd    p0    p25    p50     p75 p100 hist 
 1 age                          3         0.990   20.3     3.49  17     19     20      21      54 ▇▁▁▁▁
 2 effort_1                     0         1        3.55    1.03   1      3      4       4       5 ▁▂▅▇▃
 3 effort_2                     0         1        2.61    1.13   1      2      2       3       5 ▃▇▅▅▁
 4 effort_3                     0         1        3.35    1.04   1      3      3       4       5 ▁▅▇▇▃
 5 effort_4                     0         1        2.46    1.13   1      2      2       3       5 ▅▇▃▃▁
 6 effort_5                     0         1        2.51    1.12   1      2      2       3       5 ▃▇▃▃▁
 7 effort_6                     0         1        3.64    0.962  1      3      4       4       5 ▁▂▅▇▃
 8 effort_7                     0         1        2.36    1.06   1      2      2       3       5 ▃▇▃▃▁
 9 effort_8                     0         1        3.80    0.948  1      3      4       4       5 ▁▂▃▇▃
10 ipaq_sitt                    0         1     1257.   1388.     0    360    840    1680    8655 ▇▂▁▁▁
11 ipaq_walk                    0         1      385.    705.     0     90    210     390    9000 ▇▁▁▁▁
12 ipaq_mopa                    0         1      175.    241.     0     30    120     240    1930 ▇▁▁▁▁
13 ipaq_vipa                    0         1      208.    303.     0      0    105     300    2400 ▇▁▁▁▁
14 ipaq_mvpa                    0         1      383     492.     0     90    240     480    3600 ▇▁▁▁▁
15 intention                    0         1        5.06    1.49   1      4      5.5     6       7 ▂▂▃▅▇
16 self_efficacy                1         0.997    4.24    0.758  1.67   4      4.33    5       5 ▁▂▁▇▇
17 automaticity                 2         0.993    4.09    1.52   1      3      4       5.12    7 ▃▆▇▆▃
18 attitudes_instru             1         0.997    5.95    1.19   1      5      6.33    7       7 ▁▁▁▃▇
19 attitudes_affect             1         0.997    5.00    1.30   1      4      5       6       7 ▁▂▅▇▆
20 motivation_auto              0         1        3.68    0.958  1      3      3.67    4.5     5 ▁▂▆▇▇
21 motivation_cont              0         1        2.62    0.961  1      2      2.5     3.25    5 ▆▇▇▃▂
22 need_cognition               0         1        3.38    0.721  1.33   3      3.33    3.83    5 ▁▃▇▆▂
23 approach_effort              0         1        3.59    0.879  1      3      3.75    4       5 ▁▂▅▇▅
24 avoid_effort                 0         1        2.48    0.988  1      1.75   2.25    3.25    5 ▆▇▅▃▁
25 approach_temperament         0         1        4.89    0.949  1.2    4.4    5       5.6     7 ▁▁▅▇▂
26 avoid_temperament            0         1        4.28    1.08   1.29   3.57   4.29    5       7 ▁▃▇▅▁
```



## Plotting in R

There are many ways to create plots in R.

- Base R graphics  
- `lattice` graphics
- `ggplot2` graphics
- ...

By far the most powerful and most popular package for creating plots in R is `ggplot2`.








# The `ggplot2` Package {background-image="figures/07-exploration/ggplot2-hex.png" background-opacity="0.1"}

## Grammar of Graphics

:::: {.columns}
::: {.column width="70%"}
![Leland Wilkinson](figures/07-exploration/wilkinson.jpg){fig-align="left"}
:::
::: {.column width="30%"}
![](figures/07-exploration/grammar-of-graphics.jpg)
:::
::::

## `ggplot2`

:::: {.columns}
::: {.column width="30%"}
![](figures/07-exploration/ggplot2-book.jpg)
:::
::: {.column width="70%"}
![Hadley Wickham](figures/07-exploration/wickham.jpg){fig-align="left"}
:::
::::



## Installing and loading ggplot2

We need to install the `ggplot2` package once.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

install.packages("ggplot2") # if not already installed
```

Now we can load the package into our current R session.

```{r}
#| echo: true
#| code-line-numbers: false

library(ggplot2)
```



## The `ggplot()` function

Every plot is initialized with the `ggplot()` function. It has two main arguments:

-   `data` specifies the data frame to be used
-   `mapping` specifies how variables are mapped to visual properties (aesthetics) of geoms

::: callout-important
## Aesthetics are the visual properties of geoms (e.g., position, color, size).
:::











# Basic plotting

## Data

We first specify the data frame to be used for plotting. This provides variables (columns) and observations (rows).

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(data = pes)
```



## Global aesthetics

We map variables of the data frame to global visual properties (aesthetics) of the plot. Here, `Overall` and `Wage` are mapped to x and y positions.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(data = pes, mapping = aes(x = approach_effort, y = avoid_effort))
```



## Geometric objects

We add geometric objects (geoms) with `+` and `geom_*()`. Here, we draw points at all x and y positions.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = approach_effort, y = avoid_effort)) + geom_point()

```












# More geoms and aesthetics

## Adding geoms

Geometric layers can be stacked to create more complex plots. Just add more `+ geom_*()` calls.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4

ggplot(pes, aes(x = approach_effort, y = avoid_effort)) +
  geom_point() + geom_smooth()

```



## Adding global aesthetics

Additional global aesthetics can be added to the `ggplot()` function. They will be applied to all geoms.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4

ggplot(pes, aes(x = approach_effort, y = avoid_effort, color = gender)) +
  geom_point() +
  geom_smooth()

```



## Adding local aesthetics

Aesthetics can also be added locally to affect only a single geom.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4

ggplot(pes, aes(x = approach_effort, y = avoid_effort)) +
  geom_point() +
  geom_smooth(aes(color = gender))
```


## {{< iconify solar programming-bold >}} Exercise

Open your `pes` project (see workflow) and import the data from the file `pes.csv`.

::: {.incremental}
1. Create a scatterplot showing the relationship between `intention` (x-axis) and `approach_effort` (y-axis) using `ggplot()`, `aes()` and `geom_point()`.

   ```{r}
   #| echo: true
   #| eval: false
   #| code-line-numbers: false
   #| code-fold: true
   #| code-summary: Solution
   
   ggplot(pes, aes(x = intention, y = approach_effort)) + geom_point()
   ```

2. The `alpha` aesthetic can be used to make the points transparent. Add `alpha = 0.1` to the `geom_point()` function. Why is this useful?

   ```{r}
   #| echo: true
   #| eval: false
   #| code-line-numbers: false
   #| code-fold: true
   #| code-summary: Solution
   
   ggplot(pes, aes(x = intention, y = approach_effort)) + 
     geom_point(alpha = 0.1)
   ```

3. Now fit a regression line to the plot using `geom_smooth(method = "lm")`.

   ```{r}
   #| echo: true
   #| eval: false
   #| code-line-numbers: false
   #| code-fold: true
   #| code-summary: Solution
   
   ggplot(pes, aes(x = intention, y = approach_effort)) + 
     geom_point(alpha = 0.1) + geom_smooth(method = "lm")
   ```
:::













# Common types of plots

## Histograms and density plots

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = approach_effort)) + 
  geom_histogram()
```

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = approach_effort)) + 
  geom_density()
```
:::
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = approach_effort)) + 
  geom_histogram(color = "white")
```
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = approach_effort)) + 
  geom_density(aes(color = gender))
```
:::
::::



## Boxplots and violin plots

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = approach_effort)) + 
  geom_boxplot()
```

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = gender, y = approach_effort)) + 
  geom_violin()
```
:::
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = approach_effort)) + 
  geom_boxplot(aes(fill = gender))
```

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = gender, y = approach_effort)) + 
  geom_violin() + geom_boxplot(width = 0.1) 
```
:::
::::



## Barplots

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = gender)) + 
  geom_bar()
```

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = approach_effort, 
                fill = gender)) + 
  geom_bar(position = "stack")
```
:::
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = gender)) + 
  geom_bar(aes(fill = gender))
```

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

ggplot(pes, aes(x = approach_effort, 
                 fill = gender)) + 
  geom_bar(position = "dodge")
```
:::
::::








# Fine-tuning plots

## Facets

Facets can be used to create multiple plots based on a categorical variable.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

# Create a plot for each foot
ggplot(pes, aes(x = approach_effort, y = avoid_effort)) + 
  geom_point() + geom_smooth() +
  facet_wrap(~ gender)
```

## Scales

Scales control the mapping from data to aesthetics. They can be manually changed with `scale_*` functions.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

# Change the color used for the points
ggplot(pes, aes(x = approach_effort, y = avoid_effort, color = gender)) + 
  geom_point() + 
  scale_color_manual(values = c("blue", "red")) +
  labs(x = "Approach of Effort", y = "Avoidance of Effort", 
       title = "Relationship between Approach and Avoidance of Effort",
       color = "Gender")
```

## Theme elements

Theme elements control the non-data components of the plot. They can be changed with `theme()` function.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

# Change the position of the legend from the right to the bottom
ggplot(pes, aes(x = approach_effort, y = avoid_effort, color = gender)) + 
  geom_point() + 
  theme(legend.position = "bottom")
```

## Themes

Themes change the overall appearance of the plot. They can be changed with `theme_*` functions.

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 4
#| code-line-numbers: false

# Use the black and white (bw) theme
ggplot(pes, aes(x = approach_effort, y = avoid_effort, color = gender)) + 
  geom_point() + 
  theme_bw()
```



# Saving plots

## The `ggsave()` function

The `ggsave()` function saves plots to a file. By default, the last plot is saved into your current working directory.

-   The `filename` argument specifies the file name. The file type is automatically determined by the file extension (e.g., PNG, JPG).
-   The optional `path` argument specifies the path to the file.
-   The optional `width` and `height` arguments specify the width and height of the plot.

## Example

The following code saves a plot as a PNG file into the "figures" folder of the current working directory. The plot is named "myplot" and has a width of 9 inches and a height of 4 inches.

```{r}
#| echo: true
#| eval: false

ggsave(filename = "figures/07-exploration/myplot.png", 
       width = 9, height = 4)
```

There are several additional options, e.g.

-   `plot` to specify the plot to be saved
-   `dpi` to specify the resolution of the plot
-   `units` to specify the units of the width and height arguments




## {{< iconify solar programming-bold >}} Exercise

::: {.incremental}

There are many packages available for R that extend the functionality of `ggplot2`. One of these packages is `ggrain`, which provides a `geom_rain()` function for raincloud plots.

1. Install and load the `ggrain` package.

   ```{r}
   #| echo: true
   #| code-line-numbers: false
   #| code-fold: true
   #| code-summary: Solution
   
   # install.packages("ggrain")
   library(ggrain)
   ```

2. Create a raincloud plot showing the distribution of `approach_effort` for each `gender`.

   ```{r}
   #| echo: true
   #| code-line-numbers: false
   #| code-fold: true
   #| code-summary: Solution
   
   p <- ggplot(pes, aes(x = gender, y = approach_effort, fill =  gender)) +
        geom_rain()
   ```

3. Change the theme to `theme_minimal()`.

   ```{r}
   #| echo: true
   #| code-line-numbers: false
   #| code-fold: true
   #| code-summary: Solution
   
   p <- p + theme_minimal()
   ```
   
4. Label the axes with `labs()`.

   ```{r}
   #| echo: true
   #| code-line-numbers: false
   #| code-fold: true
   #| code-summary: Solution
   
   p <- p + labs(x = "Gender", y = "Approach of Effort")
   ```
   
5. Save the plot as "raincloud.pdf" in the "figures" folder of your project.

   ```{r}
   #| echo: true
   #| code-line-numbers: false
   #| code-fold: true
   #| code-summary: Solution
   
   ggsave(filename = "figures/raincloud.pdf", plot = p)
   ```
:::