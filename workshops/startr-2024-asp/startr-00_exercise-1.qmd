---
title: "Übung: 'Grundlagen der statistischen Programmierung mit R'"
subtitle: "Methodenfortbildung der ASP"
description: "Exercises for Day 1 of the workshop"
author: "Maik Bieleke, PhD"
institute: "University of Konstanz"
date: 11/02/2024
date-format: long
format: 
  html:
    toc: true
    embed-resources: false
---

# Building blocks

## R as a calculator

@.  A runner completes runs of 5.2 km, 3.8 km, and 7.6 km in one week. Calculate the total distance run.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    5.2 + 3.8 + 7.6
    ```
    
@.  Calculate the Body Mass Index (BMI) for a person who weighs 70 kg and is 1.75 meters tall. (BMI formula: $\text{weight} / \text{height}^2$)

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    70 / (1.75^2)
    ```

@.  A runner completes a lap on a circular track with a diameter of 400 meters. Calculate the lap distance (Hint: circumference of a circle = $\pi \times \text{diameter}$).

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    pi * 400
    ```
    
@.  A swimmer’s training consists of daily distances of 200m, 500m, 300m, 800m, and 400m. Get information about R's `cumsum()` function and use to determine the cumulative distance over the five days.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    cumsum(c(200, 500, 300, 800, 400))
    ```
    
## Working with objects

@.  Run the following code, which assigns distances run in kilometers and miles to objects `km1`, `km2`, `km3`, `mi1`, and `mi2`.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    
    km1 <- 5  # Distance in km for the first run
    km2 <- 8  # Distance in km for the second run
    km3 <- 10 # Distance in km for the third run
    mi1 <- 3  # Distance in miles for the first run
    mi2 <- 6  # Distance in miles for the second run
    ```

@.  Convert the distances in miles to kilometers. The conversion factor is 1 mile = 1.60934 km. Store the results in  new objects called `km4` (for `mi1`) and `km5` (for `mi2`).

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    km4 <- mi1 * 1.60934
    km5 <- mi2 * 1.60934
    ```
    
@.  Locate your workspace in RStudio. It should now 7 display variables (`km1`, `km2`, `km3`, `km4`, `km5`, `mi1`, `mi2`,). Remove the objects `mi1` and `mi2` from your workspace. (Hint: The function for this is not on the slides, you have to look it up.)

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    rm(mi1, mi2)
    ```
    
@.  Calculate the total distance run in kilometers by summing `km1`, `km2`, `km3`, `km4`, and `km5` and save the result as a new object called `total_distance`.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    total_distance <- km1 + km2 + km3 + km4 + km5
    ```

@.  Store the average distance run in kilometers in a new object called average_distance.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    average_distance <- total_distance / 5
    ```

@.  Make a vector called `distances` with the five distances in kilometers (`km1`, `km2`, `km3`, `km4`, and `km5`). 

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    distances <- c(km1, km2, km3, km4, km5)
    ```

@.  Find the minimum, maximum, length, and mean of the vector `distances`.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    min(distances)
    max(distances)
    length(distances)
    mean(distances)
    ```

## Packages, scripts, and debugging

@.  Install and load the package `praise`. Use the function `praise()` to get a compliment.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    # install.packages("praise")
    library(praise)
    praise()
    ```

@.  Using the Help tab in RStudio, find the documentation for the `praise()` function. What does the function do?

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    ?praise
    ```
    
@.  Create a new R script in RStudio and save it. Copy the code from the previous exercises into the script and save it. (Hint: You can use History tab to access previous commands). Use comments to create a header for the script (e.g., title, name, date, etc.) and to explain the code.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    # +++++++++++++++++++++++++++++
    # Exercise 1: R as a calculator
    # Author:     Max Mustermann
    # Date:       01/01/2024
    # +++++++++++++++++++++++++++++
    
    # Problem 1: Addition
    # ~~~~~~~~~~~~~~~~~~~
    
    5.2 + 3.8 + 7.6 # add kilometers
    
    # etc.
    ```

@.  Alex is working with data from the International Physical Activity Questionnaire (IPAQ) and wants to calculate the total physical activity score for a participant. The IPAQ records the time (in minutes) spent in different activity types over a week: vigorous activity, moderate activity, and walking. Alex’s goal is to calculate the total weekly score using the formula below:

    Total Score = (Vigorous Minutes × 8) + (Moderate Minutes × 4) + (Walking Minutes × 3.3)

    Alex has written some code but ran into problems. Can you help Alex identify and correct five issues?

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    
    % Hours spent in each activity type:
    vigorous_minutes = 120
    moderate_minutes = 240
    walking_minutes  = 420
    
    % Calculate the total score:
    total_score = (vigorous_minutes * 8.0) + (moderate_minutes * 4,0) + (walking_minutes * 3.3
    
    % Print the total score:
    total.score
    ```
    
    ```{r}  
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    # ISSUE 1: incorrect comment syntax (use # instead of //)
    # ISSUE 2: incorrent assignment operator (use <- instead of =)
    # ISSUE 3: incorrect decimal point (use 4.0 instead of 4,0)
    # ISSUE 4: incorrect object name (use total_score instead of total.score)
    # ISSUE 5: missing closing parenthesis in the formula (add ) after 3.3)
    
    # Hours spent in each activity type
    vigorous_minutes <- 120 
    moderate_minutes <- 240
    walking_minutes  <- 420
    
    # Calculate the total score
    total_score <- (vigorous_minutes * 8.0) + (moderate_minutes * 4.0) + (walking_minutes * 3.3)
    
    # Print the total score
    total_score
    ```

# Scalars and vectors

## Sequences and repetition

An experience sampling study collects data on mood ratings from several participants over the course of a week.

@.  The study has 10 participants. Create a vector called `participants` that contains the participant numbers from 1 to 10.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    participants <- 1:10
    ```

@.  Assessments take place from Monday to Friday. Create a vector called `weekdays` that contains the names of the days of the week.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
    ```

@.  The mood samples are taken every three hours between 8:00 and 21:00. Create a vector `times` that contains the hours of the day when the mood ratings were collected.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    times <- seq(8, 21, by = 3)
    ```
    
@.  Compute the total number of mood ratings assessed (assuming no missings).

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    length(participants) * length(weekdays) * length(times)
    ```
    
@.  Run the following code:

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false

    expand.grid(participant = participants, weekday = weekdays, time = times)
    ```
    
    What does the function `expand.grid()` do with the three vectors? Inspect the output of the function and consult the documentation or browse the web for an explanation. How could the function be useful in the context of the experience sampling study?

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    # expand.grid() creates a data frame with all combinations of the input vectors.
    # The output shows all possible combinations of participants, weekdays, and times, which can be useful for organizing the data for the study.
    ```
    
## Indexing and subsetting

You are working with data collected from athletes during a training study. The vector `heart_rate` represents heart rate measurements (in beats per minute) recorded at regular intervals during a high-intensity interval training (HIIT) session.

Here is the vector:

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

heart_rate <- c(80, 85, 110, 135, 150, 165, 180, 175, 160, 140, 120, 100)
```
    
@.  There is an error in the data: The value 175 is incorrect and should be replaced with a missing value. Correct the value in the vector accordingly.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    heart_rate[heart_rate == 175] <- NA
    ```
    
@.  The first value is a baseline measurement taken before the training session and is irrelevant for further analyses. Remove the first value from the vector.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    heart_rate <- heart_rate[-1]
    ```
    
@.  Subset the heart rate measurements taken in the middle of the session, i.e., select the 4th to the 8th elements.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    heart_rate[4:8]
    ```

@.  Use a logical condition to extract all heart rate values greater than 150 bpm.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    heart_rate[heart_rate > 150]
    ```

@.  Use a logical condition to subset heart rate values that are either less than 100 bpm or greater than 170 bpm.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    heart_rate[heart_rate < 100 | heart_rate > 170]
    ```
    
@.  Divide all heart rate values by 10 to convert them on a ratings of perceived exertion (RPE) scale (6 to 20). Store the results in a new vector called `heart_rate_rpe`.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    heart_rate_rpe <- heart_rate / 10
    ```
    
@.  Compute mean, standard deviation, and range of `heart_rate_rpe`.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    mean(heart_rate_rpe, na.rm = T)
    sd(heart_rate_rpe, na.rm = T)
    range(heart_rate_rpe, na.rm = T)
    ```
    

# Matrices and data frames

## Matrices

@.  Produce an object with the following correlation matrix of three variables and call it `cor_matrix`.

    ```
         [,1] [,2] [,3]
    [1,]  1.0 -0.4  0.6
    [2,] -0.4  1.0 -0.5
    [3,]  0.6 -0.5  1.0
    ```

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    cor_matrix <- matrix(c(1.0, -0.4, 0.6, -0.4, 1.0, -0.5, 0.6, -0.5, 1.0), 
                         nrow = 3, ncol = 3)
    ```
    
@.  The `upper.tri()` function can be used to extract the upper triangle of a matrix. Use this function to extract the upper triangle of the correlation matrix and call it `correlations`. What kind of object is it?

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    # You get a vector
    correlations <- cor_matrix[upper.tri(cor_matrix)]
    ```
    
@.  Replace the values in `correlations` by their absolute values.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    correlations <- abs(correlations)
    ```
    
@.  You should now have a vector with three positive correlations coefficients. We want to Fisher-transform these coefficients to z-scores for further computations. This can be done with the following function:

    $$
    z = \frac{1}{2} \log\left(\frac{1 + r}{1 - r}\right)
    $$
    
    Such functions can be defined in R with the `function()` function. Use the documentation and/or the internet to understand the code and then run it to make the function `fisher_z_transform()` available in your workspace.
    
    ```
    fisher_z_transform <- function(r) {
  0.5 * log((1 + r) / (1 - r))
    }
    ```
    
    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    fisher_z_transform <- function(r) {
  0.5 * log((1 + r) / (1 - r))
    }
    ```
    
@.  Apply the `fisher_z_transform()` function to the vector `correlations` and store the results in a new vector called `correlations_z`.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    correlations_z <- fisher_z_transform(correlations)
    ``` 

@.  Compute the mean of the transformed correlations and store the result in a new object called `correlations_z_mean`.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    correlations_z_mean <- mean(correlations_z)
    ```
    
@.  Back-transform the mean z-score to a correlation coefficient using the inverse function:

    $$
    r = \frac{e^{2z} - 1}{e^{2z} + 1}
    $$
    
    Define the inverse function `fisher_z_inverse()` in R using the same logic as introduced above. Apply it to the mean z-score to get the mean correlation coefficient.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    fisher_z_inverse <- function(z) {
      (exp(2 * z) - 1) / (exp(2 * z) + 1)
    }
    
    fisher_z_inverse(correlations_z_mean)
    ```

## Data frames

@.  Create a data frame called `training_data` using the following information:

    - `athlete_id`: Unique identifier for each athlete (values: 1, 2, 3, 4, 5)
    - `training_type`: Type of training (values: "Strength", "Endurance", "Strength", "Endurance", "Strength")
    - `duration_min`: Duration of each training session in minutes (values: 45, 60, 50, 75, 40)
    - `perceived_effort`: Subjective effort rating on a scale from 1 (very easy) to 10 (extremely hard) (values: 7, 5, 8, 6, 9)
    
    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    training_data <- data.frame(
      athlete_id = c(1, 2, 3, 4, 5),
      training_type = c("Strength", "Endurance", "Strength", "Endurance", "Strength"),
      duration_min = c(45, 60, 50, 75, 40),
      perceived_effort = c(7, 5, 8, 6, 9)
    )
    ```

@.  Select only the `athlete_id` and `duration_min` columns.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    training_data[, c("athlete_id", "duration_min")]
    # dplyr::select(training_data, athlete_id, duration_min)
    ```
    
@.  Select rows where the training type is `"Strength"`.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    training_data[training_data$training_type == "Strength", ]
    # dplyr::filter(training_data, training_type == "Strength")
    ```

@.  Add a new column called `calories_burned` using the formula: `duration_min * 10`. Assume that, on average, athletes burn 10 calories per minute.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    training_data$calories_burned <- training_data$duration_min * 10
    training_data
    # dplyr::mutate(training_data, calories_burned = duration_min * 10)
    ```

@.  Rename `duration_min` to `session_duration` and `perceived_effort` to `effort_rating.`

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    names(training_data)[names(training_data) == "duration_min"] <- "session_duration"
    names(training_data)[names(training_data) == "perceived_effort"] <- "effort_rating"
    
    # dplyr::rename(training_data, session_duration = duration_min, effort_rating = perceived_effort)
    ```

@.  Select athletes who did `"Endurance"` training and had an `effort_rating` of 6 or more.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    training_data[training_data$training_type == "Endurance" & training_data$effort_rating >= 6, ]
    # dplyr::filter(training_data, training_type == "Endurance" & effort_rating >= 6)
    ```

@.  Compute the mean `session_duration` and `effort_rating` for each training type.

    ```{r}
    #| echo: true
    #| eval: false
    #| code-line-numbers: false
    #| code-fold: true
    #| code-summary: Solution
    
    mean(training_data[training_data$training_type == "Strength",]$session_duration)
    mean(training_data[training_data$training_type == "Strength",]$effort_rating)
    mean(training_data[training_data$training_type == "Endurance",]$session_duration)
    mean(training_data[training_data$training_type == "Endurance",]$effort_rating)
    
    dplyr::summarize(dplyr::filter(training_data, training_type == "Strength"), 
                     mean_duration = mean(session_duration), 
                     mean_effort = mean(effort_rating))
    dplyr::summarize(dplyr::filter(training_data, training_type == "Endurance"), 
                     mean_duration = mean(session_duration), 
                     mean_effort = mean(effort_rating))
    ```